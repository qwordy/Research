commit 88e639150e19ecb4558f1035ec57d8d5e9b96666
Author: Mark Thomas <markt@apache.org>
Date:   Tue Dec 16 21:51:33 2014 +0000

    Switch to ConcurrentHashMap and remove syncs


diff --git a/java/org/apache/catalina/authenticator/SingleSignOn.java b/java/org/apache/catalina/authenticator/SingleSignOn.java
index f400619..cd5a6ec 100644
--- a/java/org/apache/catalina/authenticator/SingleSignOn.java
+++ b/java/org/apache/catalina/authenticator/SingleSignOn.java
@@ -18,8 +18,8 @@ package org.apache.catalina.authenticator;
 
 import java.io.IOException;
 import java.security.Principal;
-import java.util.HashMap;
 import java.util.Map;
+import java.util.concurrent.ConcurrentHashMap;
 
 import javax.servlet.ServletException;
 import javax.servlet.http.Cookie;
@@ -66,8 +66,7 @@ public class SingleSignOn extends ValveBase implements SessionListener {
      * The cache of SingleSignOnEntry instances for authenticated Principals,
      * keyed by the cookie value that is used to select them.
      */
-    protected final Map<String,SingleSignOnEntry> cache = new HashMap<>();
-
+    protected final Map<String,SingleSignOnEntry> cache = new ConcurrentHashMap<>();
 
     /**
      * Indicates whether this valve should require a downstream Authenticator to
@@ -80,7 +79,7 @@ public class SingleSignOn extends ValveBase implements SessionListener {
      * The cache of single sign on identifiers, keyed by the Session that is
      * associated with them.
      */
-    protected final Map<Session,String> reverse = new HashMap<>();
+    protected final Map<Session,String> reverse = new ConcurrentHashMap<>();
 
 
     /**
@@ -210,9 +209,7 @@ public class SingleSignOn extends ValveBase implements SessionListener {
         }
 
         String ssoId = null;
-        synchronized (reverse) {
-            ssoId = reverse.get(session);
-        }
+        ssoId = reverse.get(session);
         if (ssoId == null) {
             return;
         }
@@ -359,10 +356,7 @@ public class SingleSignOn extends ValveBase implements SessionListener {
         if (sso != null) {
             sso.addSession(this, session);
         }
-        synchronized (reverse) {
-            reverse.put(session, ssoId);
-        }
-
+        reverse.put(session, ssoId);
     }
 
 
@@ -375,9 +369,7 @@ public class SingleSignOn extends ValveBase implements SessionListener {
      */
     protected void deregister(String ssoId, Session session) {
 
-        synchronized (reverse) {
-            reverse.remove(session);
-        }
+        reverse.remove(session);
 
         SingleSignOnEntry sso = lookup(ssoId);
         if (sso == null) {
@@ -389,11 +381,8 @@ public class SingleSignOn extends ValveBase implements SessionListener {
         // see if we are the last session, if so blow away ssoId
         Session sessions[] = sso.findSessions();
         if (sessions == null || sessions.length == 0) {
-            synchronized (cache) {
-                cache.remove(ssoId);
-            }
+            cache.remove(ssoId);
         }
-
     }
 
 
@@ -410,10 +399,7 @@ public class SingleSignOn extends ValveBase implements SessionListener {
         }
 
         // Look up and remove the corresponding SingleSignOnEntry
-        SingleSignOnEntry sso = null;
-        synchronized (cache) {
-            sso = cache.remove(ssoId);
-        }
+        SingleSignOnEntry sso = cache.remove(ssoId);
 
         if (sso == null) {
             return;
@@ -426,9 +412,7 @@ public class SingleSignOn extends ValveBase implements SessionListener {
                 containerLog.trace(" Invalidating session " + sessions[i]);
             }
             // Remove from reverse cache first to avoid recursion
-            synchronized (reverse) {
-                reverse.remove(sessions[i]);
-            }
+            reverse.remove(sessions[i]);
             // Invalidate this session
             sessions[i].expire();
         }
@@ -509,11 +493,7 @@ public class SingleSignOn extends ValveBase implements SessionListener {
                 (principal != null ? principal.getName() : "") + "' with auth type '" + authType + "'");
         }
 
-        synchronized (cache) {
-            cache.put(ssoId, new SingleSignOnEntry(principal, authType,
-                                                   username, password));
-        }
-
+        cache.put(ssoId, new SingleSignOnEntry(principal, authType, username, password));
     }
 
 
@@ -566,11 +546,7 @@ public class SingleSignOn extends ValveBase implements SessionListener {
      * @param ssoId Single sign on identifier to look up
      */
     protected SingleSignOnEntry lookup(String ssoId) {
-
-        synchronized (cache) {
-            return cache.get(ssoId);
-        }
-
+        return cache.get(ssoId);
     }
 
 
@@ -598,9 +574,7 @@ public class SingleSignOn extends ValveBase implements SessionListener {
         entry.removeSession(session);
 
         // Remove the inactive session from the 'reverse' Map.
-        synchronized(reverse) {
-            reverse.remove(session);
-        }
+        reverse.remove(session);
 
         // If there are not sessions left in the SingleSignOnEntry,
         // deregister the entry.

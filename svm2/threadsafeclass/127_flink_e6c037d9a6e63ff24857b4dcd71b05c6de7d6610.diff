commit e6c037d9a6e63ff24857b4dcd71b05c6de7d6610
Author: Daniel Warneke <daniel.warneke@tu-berlin.de>
Date:   Wed May 16 16:45:23 2012 +0200

    Replaced synchronized block in lookup structure by java concurrent data structure

diff --git a/nephele/nephele-server/src/main/java/eu/stratosphere/nephele/taskmanager/bytebuffered/NetworkConnectionManager.java b/nephele/nephele-server/src/main/java/eu/stratosphere/nephele/taskmanager/bytebuffered/NetworkConnectionManager.java
index c88abfc..c635add 100644
--- a/nephele/nephele-server/src/main/java/eu/stratosphere/nephele/taskmanager/bytebuffered/NetworkConnectionManager.java
+++ b/nephele/nephele-server/src/main/java/eu/stratosphere/nephele/taskmanager/bytebuffered/NetworkConnectionManager.java
@@ -18,11 +18,12 @@ package eu.stratosphere.nephele.taskmanager.bytebuffered;
 import java.io.IOException;
 import java.net.InetAddress;
 import java.net.InetSocketAddress;
-import java.util.ArrayList;
-import java.util.HashMap;
 import java.util.Iterator;
 import java.util.List;
 import java.util.Map;
+import java.util.concurrent.ConcurrentHashMap;
+import java.util.concurrent.ConcurrentMap;
+import java.util.concurrent.CopyOnWriteArrayList;
 
 import eu.stratosphere.nephele.configuration.Configuration;
 import eu.stratosphere.nephele.configuration.GlobalConfiguration;
@@ -50,7 +51,7 @@ public final class NetworkConnectionManager {
 	/**
 	 * List of active threads dealing with outgoing connections.
 	 */
-	private final List<OutgoingConnectionThread> outgoingConnectionThreads = new ArrayList<OutgoingConnectionThread>();
+	private final List<OutgoingConnectionThread> outgoingConnectionThreads = new CopyOnWriteArrayList<OutgoingConnectionThread>();
 
 	/**
 	 * Thread dealing with incoming connections.
@@ -60,7 +61,7 @@ public final class NetworkConnectionManager {
 	/**
 	 * Map containing currently active outgoing connections.
 	 */
-	private final Map<InetSocketAddress, OutgoingConnection> outgoingConnections = new HashMap<InetSocketAddress, OutgoingConnection>();
+	private final ConcurrentMap<InetSocketAddress, OutgoingConnection> outgoingConnections = new ConcurrentHashMap<InetSocketAddress, OutgoingConnection>();
 
 	/**
 	 * The number of connection retries before giving up.
@@ -82,12 +83,11 @@ public final class NetworkConnectionManager {
 		// Start the connection threads
 		final int numberOfOutgoingConnectionThreads = configuration.getInteger(
 			"channel.network.numberOfOutgoingConnectionThreads", DEFAULT_NUMBER_OF_OUTGOING_CONNECTION_THREADS);
-		synchronized (this.outgoingConnectionThreads) {
-			for (int i = 0; i < numberOfOutgoingConnectionThreads; i++) {
-				final OutgoingConnectionThread outgoingConnectionThread = new OutgoingConnectionThread();
-				outgoingConnectionThread.start();
-				this.outgoingConnectionThreads.add(outgoingConnectionThread);
-			}
+
+		for (int i = 0; i < numberOfOutgoingConnectionThreads; i++) {
+			final OutgoingConnectionThread outgoingConnectionThread = new OutgoingConnectionThread();
+			outgoingConnectionThread.start();
+			this.outgoingConnectionThreads.add(outgoingConnectionThread);
 		}
 
 		this.incomingConnectionThread = new IncomingConnectionThread(
@@ -105,9 +105,7 @@ public final class NetworkConnectionManager {
 	 */
 	private OutgoingConnectionThread getOutgoingConnectionThread() {
 
-		synchronized (this.outgoingConnectionThreads) {
-			return this.outgoingConnectionThreads.get((int) (this.outgoingConnectionThreads.size() * Math.random()));
-		}
+		return this.outgoingConnectionThreads.get((int) (this.outgoingConnectionThreads.size() * Math.random()));
 	}
 
 	/**
@@ -132,17 +130,23 @@ public final class NetworkConnectionManager {
 	 */
 	private OutgoingConnection getOutgoingConnection(final InetSocketAddress connectionAddress) {
 
-		synchronized (this.outgoingConnections) {
+		OutgoingConnection outgoingConnection = this.outgoingConnections.get(connectionAddress);
 
-			OutgoingConnection outgoingConnection = this.outgoingConnections.get(connectionAddress);
-			if (outgoingConnection == null) {
-				outgoingConnection = new OutgoingConnection(connectionAddress, getOutgoingConnectionThread(),
-					this.numberOfConnectionRetries);
-				this.outgoingConnections.put(connectionAddress, outgoingConnection);
-			}
+		if (outgoingConnection == null) {
+
+			outgoingConnection = new OutgoingConnection(connectionAddress, getOutgoingConnectionThread(),
+				this.numberOfConnectionRetries);
 
-			return outgoingConnection;
+			final OutgoingConnection oldEntry = this.outgoingConnections.putIfAbsent(connectionAddress,
+				outgoingConnection);
+
+			// We had a race, use the old value
+			if (oldEntry != null) {
+				outgoingConnection = oldEntry;
+			}
 		}
+
+		return outgoingConnection;
 	}
 
 	public void shutDown() {
@@ -150,28 +154,23 @@ public final class NetworkConnectionManager {
 		// Interrupt the threads we started
 		this.incomingConnectionThread.interrupt();
 
-		synchronized (this.outgoingConnectionThreads) {
-			final Iterator<OutgoingConnectionThread> it = this.outgoingConnectionThreads.iterator();
-			while (it.hasNext()) {
-				it.next().interrupt();
-			}
+		final Iterator<OutgoingConnectionThread> it = this.outgoingConnectionThreads.iterator();
+		while (it.hasNext()) {
+			it.next().interrupt();
 		}
 	}
 
 	public void logBufferUtilization() {
-		synchronized (this.outgoingConnections) {
 
-			System.out.println("\tOutgoing connections:");
+		System.out.println("\tOutgoing connections:");
 
-			final Iterator<Map.Entry<InetSocketAddress, OutgoingConnection>> it = this.outgoingConnections.entrySet()
+		final Iterator<Map.Entry<InetSocketAddress, OutgoingConnection>> it = this.outgoingConnections.entrySet()
 				.iterator();
 
-			while (it.hasNext()) {
+		while (it.hasNext()) {
 
-				final Map.Entry<InetSocketAddress, OutgoingConnection> entry = it.next();
-				System.out
-					.println("\t\tOC " + entry.getKey() + ": " + entry.getValue().getNumberOfQueuedWriteBuffers());
-			}
+			final Map.Entry<InetSocketAddress, OutgoingConnection> entry = it.next();
+			System.out.println("\t\tOC " + entry.getKey() + ": " + entry.getValue().getNumberOfQueuedWriteBuffers());
 		}
 	}
 }

commit 8eeed6413e8266d0a54e2c07c4ae1206502eef9a
Author: Konstantin Kolinko <kkolinko@apache.org>
Date:   Tue Jun 17 19:19:20 2014 +0000

    Followup to r1601583:
    Use Collections.newSetFromMap to convert ConcurrentHashMap into a Set.
    
    git-svn-id: https://svn.apache.org/repos/asf/tomcat/trunk@1603266 13f79535-47bb-0310-9956-ffa450edef68

diff --git a/java/org/apache/tomcat/util/net/AbstractEndpoint.java b/java/org/apache/tomcat/util/net/AbstractEndpoint.java
index 6234bba..41113a1 100644
--- a/java/org/apache/tomcat/util/net/AbstractEndpoint.java
+++ b/java/org/apache/tomcat/util/net/AbstractEndpoint.java
@@ -21,8 +21,10 @@ import java.io.OutputStreamWriter;
 import java.net.InetAddress;
 import java.net.InetSocketAddress;
 import java.util.ArrayList;
+import java.util.Collections;
 import java.util.HashMap;
 import java.util.Iterator;
+import java.util.Set;
 import java.util.StringTokenizer;
 import java.util.concurrent.ConcurrentHashMap;
 import java.util.concurrent.Executor;
@@ -122,9 +124,7 @@ public abstract class AbstractEndpoint<S> {
                     // Ignore
                 }
                 long now = System.currentTimeMillis();
-                Iterator<SocketWrapper<S>> sockets = waitingRequests.keySet().iterator();
-                while (sockets.hasNext()) {
-                    SocketWrapper<S> socket = sockets.next();
+                for (SocketWrapper<S> socket : waitingRequests) {
                     long access = socket.getLastAccess();
                     if (socket.getTimeout() > 0 && (now - access) > socket.getTimeout()) {
                         processSocket(socket, SocketStatus.TIMEOUT, true);
@@ -1026,8 +1026,9 @@ public abstract class AbstractEndpoint<S> {
         }
     }
 
-    protected ConcurrentHashMap<SocketWrapper<S>, SocketWrapper<S>> waitingRequests =
-            new ConcurrentHashMap<>();
+
+    protected final Set<SocketWrapper<S>> waitingRequests = Collections
+            .newSetFromMap(new ConcurrentHashMap<SocketWrapper<S>, Boolean>());
 
 
     /**
diff --git a/java/org/apache/tomcat/util/net/AprEndpoint.java b/java/org/apache/tomcat/util/net/AprEndpoint.java
index 21e17d1..4d75895 100644
--- a/java/org/apache/tomcat/util/net/AprEndpoint.java
+++ b/java/org/apache/tomcat/util/net/AprEndpoint.java
@@ -870,7 +870,7 @@ public class AprEndpoint extends AbstractEndpoint<Long> {
             // result of calling AsyncContext.dispatch() from a non-container
             // thread
             synchronized (socket) {
-                if (waitingRequests.remove(socket) != null) {
+                if (waitingRequests.remove(socket)) {
                     SocketProcessor proc = new SocketProcessor(socket, status);
                     Executor executor = getExecutor();
                     if (dispatch && executor != null) {
@@ -2324,7 +2324,7 @@ public class AprEndpoint extends AbstractEndpoint<Long> {
                     } else if (state == Handler.SocketState.LONG) {
                         socket.access();
                         if (socket.isAsync()) {
-                            waitingRequests.put(socket, socket);
+                            waitingRequests.add(socket);
                         }
                     }
                 }
@@ -2386,7 +2386,7 @@ public class AprEndpoint extends AbstractEndpoint<Long> {
             } else if (state == Handler.SocketState.LONG) {
                 socket.access();
                 if (socket.isAsync()) {
-                    waitingRequests.put(socket, socket);
+                    waitingRequests.add(socket);
                 }
             } else if (state == Handler.SocketState.ASYNC_END) {
                 socket.access();
diff --git a/java/org/apache/tomcat/util/net/JIoEndpoint.java b/java/org/apache/tomcat/util/net/JIoEndpoint.java
index e8aa638..749af96 100644
--- a/java/org/apache/tomcat/util/net/JIoEndpoint.java
+++ b/java/org/apache/tomcat/util/net/JIoEndpoint.java
@@ -298,7 +298,7 @@ public class JIoEndpoint extends AbstractEndpoint<Socket> {
                         launch = true;
                     } else if (state == SocketState.LONG) {
                         socket.access();
-                        waitingRequests.put(socket, socket);
+                        waitingRequests.add(socket);
                     }
                 } finally {
                     if (launch) {
@@ -514,7 +514,7 @@ public class JIoEndpoint extends AbstractEndpoint<Socket> {
             // result of calling AsyncContext.dispatch() from a non-container
             // thread
             synchronized (socket) {
-                if (waitingRequests.remove(socket) != null) {
+                if (waitingRequests.remove(socket)) {
                     SocketProcessor proc = new SocketProcessor(socket,status);
                     Executor executor = getExecutor();
                     if (dispatch && executor != null) {
diff --git a/java/org/apache/tomcat/util/net/Nio2Endpoint.java b/java/org/apache/tomcat/util/net/Nio2Endpoint.java
index a4d8be0..28e3036 100644
--- a/java/org/apache/tomcat/util/net/Nio2Endpoint.java
+++ b/java/org/apache/tomcat/util/net/Nio2Endpoint.java
@@ -388,7 +388,7 @@ public class Nio2Endpoint extends AbstractEndpoint<Nio2Channel> {
             @Override
             public void run() {
                 // Timeout any pending async request
-                for (SocketWrapper<Nio2Channel> socket : waitingRequests.keySet()) {
+                for (SocketWrapper<Nio2Channel> socket : waitingRequests) {
                     processSocket(socket, SocketStatus.TIMEOUT, false);
                 }
                 // Then close all active connections if any remains
@@ -849,11 +849,11 @@ public class Nio2Endpoint extends AbstractEndpoint<Nio2Channel> {
     };
 
     public void addTimeout(SocketWrapper<Nio2Channel> socket) {
-        waitingRequests.put(socket, socket);
+        waitingRequests.add(socket);
     }
 
     public boolean removeTimeout(SocketWrapper<Nio2Channel> socket) {
-        return waitingRequests.remove(socket) != null;
+        return waitingRequests.remove(socket);
     }
 
     public static void startInline() {

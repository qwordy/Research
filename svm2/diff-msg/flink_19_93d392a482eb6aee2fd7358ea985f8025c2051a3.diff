commit 93d392a482eb6aee2fd7358ea985f8025c2051a3
Author: Stephan Ewen <sewen@apache.org>
Date:   Mon Dec 28 15:30:29 2015 +0100

    [hotfix] [core] Minor cleanup in SignalHandler.
    
    This makes the signal handler registration atomic and does not fail (but ignore) re-registration.

diff --git a/flink-runtime/src/main/java/org/apache/flink/runtime/util/SignalHandler.java b/flink-runtime/src/main/java/org/apache/flink/runtime/util/SignalHandler.java
index 1b60719..cff8ba1 100644
--- a/flink-runtime/src/main/java/org/apache/flink/runtime/util/SignalHandler.java
+++ b/flink-runtime/src/main/java/org/apache/flink/runtime/util/SignalHandler.java
@@ -15,6 +15,7 @@
  * See the License for the specific language governing permissions and
  * limitations under the License.
  */
+
 package org.apache.flink.runtime.util;
 
 import org.slf4j.Logger;
@@ -24,14 +25,16 @@ import sun.misc.Signal;
  * This signal handler / signal logger is based on Apache Hadoop's org.apache.hadoop.util.SignalLogger.
  */
 public class SignalHandler {
+	
 	private static boolean registered = false;
 
 	/**
 	 * Our signal handler.
 	 */
 	private static class Handler implements sun.misc.SignalHandler {
-		final private Logger LOG;
-		final private sun.misc.SignalHandler prevHandler;
+		
+		private final Logger LOG;
+		private final sun.misc.SignalHandler prevHandler;
 
 		Handler(String name, Logger LOG) {
 			this.LOG = LOG;
@@ -58,25 +61,30 @@ public class SignalHandler {
 	 * @param LOG The slf4j logger
 	 */
 	public static void register(final Logger LOG) {
-		if (registered) {
-			throw new IllegalStateException("Can't re-install the signal handlers.");
-		}
-		registered = true;
-		StringBuilder bld = new StringBuilder();
-		bld.append("registered UNIX signal handlers for [");
-		final String[] SIGNALS = { "TERM", "HUP", "INT" };
-		String separator = "";
-		for (String signalName : SIGNALS) {
-			try {
-				new Handler(signalName, LOG);
-				bld.append(separator);
-				bld.append(signalName);
-				separator = ", ";
-			} catch (Exception e) {
-				LOG.debug("Error while registering signal handler", e);
+		synchronized (SignalHandler.class) {
+			if (registered) {
+				return;
+			}
+			registered = true;
+
+			final String[] SIGNALS = { "TERM", "HUP", "INT" };
+			
+			StringBuilder bld = new StringBuilder();
+			bld.append("Registered UNIX signal handlers for [");
+			
+			String separator = "";
+			for (String signalName : SIGNALS) {
+				try {
+					new Handler(signalName, LOG);
+					bld.append(separator);
+					bld.append(signalName);
+					separator = ", ";
+				} catch (Exception e) {
+					LOG.info("Error while registering signal handler", e);
+				}
 			}
+			bld.append("]");
+			LOG.info(bld.toString());
 		}
-		bld.append("]");
-		LOG.info(bld.toString());
 	}
 }

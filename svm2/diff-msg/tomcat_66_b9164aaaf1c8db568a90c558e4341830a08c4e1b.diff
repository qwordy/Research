commit b9164aaaf1c8db568a90c558e4341830a08c4e1b
Author: Mark Emlyn David Thomas <markt@apache.org>
Date:   Wed Sep 26 16:55:56 2012 +0000

    A slightly different alternative to ConcurrentLinkedQueue. This one is also largely GC free and has similar performance to the Stack version.
    
    git-svn-id: https://svn.apache.org/repos/asf/tomcat/trunk@1390599 13f79535-47bb-0310-9956-ffa450edef68

diff --git a/java/org/apache/tomcat/util/collections/SynchronizedQueue.java b/java/org/apache/tomcat/util/collections/SynchronizedQueue.java
new file mode 100644
index 0000000..95e8bcd
--- /dev/null
+++ b/java/org/apache/tomcat/util/collections/SynchronizedQueue.java
@@ -0,0 +1,103 @@
+/*
+ * Licensed to the Apache Software Foundation (ASF) under one or more
+ * contributor license agreements.  See the NOTICE file distributed with
+ * this work for additional information regarding copyright ownership.
+ * The ASF licenses this file to You under the Apache License, Version 2.0
+ * (the "License"); you may not use this file except in compliance with
+ * the License.  You may obtain a copy of the License at
+ *
+ *     http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+package org.apache.tomcat.util.collections;
+
+/**
+ * This is intended as a (mostly) GC-free alternative to
+ * {@link java.util.concurrent.ConcurrentLinkedQueue} when the requirement is to
+ * create an unbounded queue with no requirement to shrink the queue. The aim is
+ * to provide the bare minimum of required functionality as quickly as possible
+ * with minimum garbage.
+ */
+public class SynchronizedQueue<T> {
+
+    public static final int DEFAULT_SIZE = 128;
+
+    private Object[] queue;
+    private int size;
+    private int insert = 0;
+    private int remove = 0;
+
+    public SynchronizedQueue() {
+        this(DEFAULT_SIZE);
+    }
+
+    public SynchronizedQueue(int initialSize) {
+        queue = new Object[initialSize];
+        size = initialSize;
+    }
+
+    public synchronized boolean offer(T t) {
+        queue[insert++] = t;
+
+        // Wrap
+        if (insert == size) {
+            insert = 0;
+        }
+
+        if (insert == remove) {
+            expand();
+        }
+        return true;
+    }
+
+    public synchronized T poll() {
+        if (insert == remove) {
+            // empty
+            return null;
+        }
+
+        @SuppressWarnings("unchecked")
+        T result = (T) queue[remove];
+        queue[remove] = null;
+        remove++;
+
+        // Wrap
+        if (remove == size) {
+            remove = 0;
+        }
+
+        return result;
+    }
+
+    private void expand() {
+        int newSize = size * 2;
+        Object[] newQueue = new Object[newSize];
+
+        System.arraycopy(queue, insert, newQueue, 0, size - insert);
+        System.arraycopy(queue, 0, newQueue, size - insert, insert);
+
+        insert = size;
+        remove = 0;
+        queue = newQueue;
+        size = newSize;
+    }
+
+    public synchronized int size() {
+        int result = insert - remove;
+        if (result < 0) {
+            result += size;
+        }
+        return result;
+    }
+
+    public synchronized void clear() {
+        queue = new Object[size];
+        insert = 0;
+        remove = 0;
+    }
+}
diff --git a/test/org/apache/tomcat/util/collections/TestSynchronizedQueue.java b/test/org/apache/tomcat/util/collections/TestSynchronizedQueue.java
new file mode 100644
index 0000000..7ecad08
--- /dev/null
+++ b/test/org/apache/tomcat/util/collections/TestSynchronizedQueue.java
@@ -0,0 +1,117 @@
+/*
+ * Licensed to the Apache Software Foundation (ASF) under one or more
+ * contributor license agreements.  See the NOTICE file distributed with
+ * this work for additional information regarding copyright ownership.
+ * The ASF licenses this file to You under the Apache License, Version 2.0
+ * (the "License"); you may not use this file except in compliance with
+ * the License.  You may obtain a copy of the License at
+ *
+ *     http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+package org.apache.tomcat.util.collections;
+
+import org.junit.Assert;
+import org.junit.Test;
+
+public class TestSynchronizedQueue {
+
+    public void testPollEmpty() {
+        SynchronizedQueue<Object> queue = new SynchronizedQueue<>();
+        Assert.assertNull(queue.poll());
+    }
+
+    @Test
+    public void testOfferPollOrder() {
+        SynchronizedQueue<Object> queue = new SynchronizedQueue<>();
+
+        Object o1 = new Object();
+        Object o2 = new Object();
+        Object o3 = new Object();
+        Object o4 = new Object();
+
+        queue.offer(o1);
+        queue.offer(o2);
+        queue.offer(o3);
+        queue.offer(o4);
+
+        Assert.assertSame(queue.poll(), o1);
+        Assert.assertSame(queue.poll(), o2);
+        Assert.assertSame(queue.poll(), o3);
+        Assert.assertSame(queue.poll(), o4);
+
+        Assert.assertNull(queue.poll());
+    }
+
+    @Test
+    public void testExpandOfferPollOrder() {
+        SynchronizedQueue<Object> queue = new SynchronizedQueue<>();
+
+        Object o1 = new Object();
+        Object o2 = new Object();
+        Object o3 = new Object();
+        Object o4 = new Object();
+
+        for (int i = 0; i < 300; i++) {
+            queue.offer(o1);
+            queue.offer(o2);
+            queue.offer(o3);
+            queue.offer(o4);
+        }
+
+        for (int i = 0; i < 300; i++) {
+            Assert.assertSame(queue.poll(), o1);
+            Assert.assertSame(queue.poll(), o2);
+            Assert.assertSame(queue.poll(), o3);
+            Assert.assertSame(queue.poll(), o4);
+        }
+
+        Assert.assertNull(queue.poll());
+    }
+
+    @Test
+    public void testExpandOfferPollOrder2() {
+        SynchronizedQueue<Object> queue = new SynchronizedQueue<>();
+
+        Object o1 = new Object();
+        Object o2 = new Object();
+        Object o3 = new Object();
+        Object o4 = new Object();
+
+        for (int i = 0; i < 100; i++) {
+            queue.offer(o1);
+            queue.offer(o2);
+            queue.offer(o3);
+            queue.offer(o4);
+        }
+
+        for (int i = 0; i < 50; i++) {
+            Assert.assertSame(queue.poll(), o1);
+            Assert.assertSame(queue.poll(), o2);
+            Assert.assertSame(queue.poll(), o3);
+            Assert.assertSame(queue.poll(), o4);
+        }
+
+        for (int i = 0; i < 200; i++) {
+            queue.offer(o1);
+            queue.offer(o2);
+            queue.offer(o3);
+            queue.offer(o4);
+        }
+
+        for (int i = 0; i < 250; i++) {
+            Assert.assertSame(queue.poll(), o1);
+            Assert.assertSame(queue.poll(), o2);
+            Assert.assertSame(queue.poll(), o3);
+            Assert.assertSame(queue.poll(), o4);
+        }
+
+
+        Assert.assertNull(queue.poll());
+    }
+}
diff --git a/test/org/apache/tomcat/util/collections/TesterPerformanceSynchronizedQueue.java b/test/org/apache/tomcat/util/collections/TesterPerformanceSynchronizedQueue.java
new file mode 100644
index 0000000..df79c72
--- /dev/null
+++ b/test/org/apache/tomcat/util/collections/TesterPerformanceSynchronizedQueue.java
@@ -0,0 +1,107 @@
+/*
+ * Licensed to the Apache Software Foundation (ASF) under one or more
+ * contributor license agreements.  See the NOTICE file distributed with
+ * this work for additional information regarding copyright ownership.
+ * The ASF licenses this file to You under the Apache License, Version 2.0
+ * (the "License"); you may not use this file except in compliance with
+ * the License.  You may obtain a copy of the License at
+ *
+ *     http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+package org.apache.tomcat.util.collections;
+
+import java.util.Queue;
+import java.util.concurrent.ConcurrentLinkedQueue;
+
+import org.junit.Test;
+
+public class TesterPerformanceSynchronizedQueue {
+
+    private static final int THREAD_COUNT = 4;
+    private static final int ITERATIONS = 1000000;
+
+    private static final SynchronizedQueue<Object> S_QUEUE =
+            new SynchronizedQueue<>();
+
+    private static final Queue<Object> QUEUE = new ConcurrentLinkedQueue<>();
+
+    @Test
+    public void testSynchronizedQueue() throws InterruptedException {
+        Thread[] threads = new Thread[THREAD_COUNT];
+        for (int i = 0; i < THREAD_COUNT; i++) {
+            threads[i] = new StackThread();
+        }
+
+        long start = System.currentTimeMillis();
+
+        for (int i = 0; i < THREAD_COUNT; i++) {
+            threads[i].start();
+        }
+
+        for (int i = 0; i < THREAD_COUNT; i++) {
+            threads[i].join();
+        }
+
+        long end = System.currentTimeMillis();
+
+        System.out.println("SynchronizedQueue: " + (end - start) + "ms");
+    }
+
+    public static class StackThread extends Thread {
+
+        @Override
+        public void run() {
+            for(int i = 0; i < ITERATIONS; i++) {
+                Object obj = S_QUEUE.poll();
+                if (obj == null) {
+                    obj = new Object();
+                }
+                S_QUEUE.offer(obj);
+            }
+            super.run();
+        }
+    }
+
+    @Test
+    public void testConcurrentQueue() throws InterruptedException {
+        Thread[] threads = new Thread[THREAD_COUNT];
+        for (int i = 0; i < THREAD_COUNT; i++) {
+            threads[i] = new QueueThread();
+        }
+
+        long start = System.currentTimeMillis();
+
+        for (int i = 0; i < THREAD_COUNT; i++) {
+            threads[i].start();
+        }
+
+        for (int i = 0; i < THREAD_COUNT; i++) {
+            threads[i].join();
+        }
+
+        long end = System.currentTimeMillis();
+
+        System.out.println("ConcurrentLinkedQueue: " + (end - start) + "ms");
+    }
+
+    public static class QueueThread extends Thread {
+
+        @Override
+        public void run() {
+            for(int i = 0; i < ITERATIONS; i++) {
+                Object obj = QUEUE.poll();
+                if (obj == null) {
+                    obj = new Object();
+                }
+                QUEUE.offer(obj);
+            }
+            super.run();
+        }
+    }
+}

commit 1b2e43e70ceb11b1188d4cc8dc05f506a3a5bee8
Author: Norman Maurer <norman_maurer@apple.com>
Date:   Tue Nov 3 09:40:16 2015 +0100

    Correctly construct Executor in microbenchmarks.
    
    Motivation:
    
    We should allow our custom Executor to shutdown quickly.
    
    Modifications:
    
    Call super constructor which correct arguments.
    
    Result:
    
    Custom Executor can be shutdown quickly.

diff --git a/microbench/src/main/java/io/netty/microbench/util/AbstractMicrobenchmark.java b/microbench/src/main/java/io/netty/microbench/util/AbstractMicrobenchmark.java
index c484d1c..8a6a195 100644
--- a/microbench/src/main/java/io/netty/microbench/util/AbstractMicrobenchmark.java
+++ b/microbench/src/main/java/io/netty/microbench/util/AbstractMicrobenchmark.java
@@ -18,7 +18,7 @@ package io.netty.microbench.util;
 import io.netty.util.concurrent.DefaultThreadFactory;
 import io.netty.util.internal.SystemPropertyUtil;
 
-import java.util.concurrent.SynchronousQueue;
+import java.util.concurrent.LinkedBlockingQueue;
 import java.util.concurrent.ThreadPoolExecutor;
 import java.util.concurrent.TimeUnit;
 
@@ -46,8 +46,8 @@ public class AbstractMicrobenchmark extends AbstractMicrobenchmarkBase {
 
     public static final class HarnessExecutor extends ThreadPoolExecutor {
         public HarnessExecutor(int maxThreads, String prefix) {
-            super(0, maxThreads, 1L, TimeUnit.DAYS, new SynchronousQueue<Runnable>(),
-                  new DefaultThreadFactory(prefix));
+            super(maxThreads, maxThreads, 0, TimeUnit.MILLISECONDS,
+                    new LinkedBlockingQueue<Runnable>(), new DefaultThreadFactory(prefix));
             System.out.println("Using harness executor");
         }
     }

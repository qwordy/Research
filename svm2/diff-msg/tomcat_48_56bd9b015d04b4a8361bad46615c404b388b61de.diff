commit 56bd9b015d04b4a8361bad46615c404b388b61de
Author: Mark Emlyn David Thomas <markt@apache.org>
Date:   Mon Aug 18 18:52:04 2014 +0000

    Add a little plumbing for outgoing messages (no actual compression yet)
    Make a couple of fields volatile that are accessed by multiple threads (in succession, not in parallel)
    
    git-svn-id: https://svn.apache.org/repos/asf/tomcat/trunk@1618704 13f79535-47bb-0310-9956-ffa450edef68

diff --git a/java/org/apache/tomcat/websocket/PerMessageDeflate.java b/java/org/apache/tomcat/websocket/PerMessageDeflate.java
index 6a647ad..d74af35 100644
--- a/java/org/apache/tomcat/websocket/PerMessageDeflate.java
+++ b/java/org/apache/tomcat/websocket/PerMessageDeflate.java
@@ -18,6 +18,7 @@ package org.apache.tomcat.websocket;
 
 import java.io.IOException;
 import java.nio.ByteBuffer;
+import java.util.ArrayList;
 import java.util.List;
 import java.util.zip.DataFormatException;
 import java.util.zip.Inflater;
@@ -48,8 +49,8 @@ public class PerMessageDeflate implements Transformation {
     private final Inflater inflator = new Inflater(true);
     private final ByteBuffer readBuffer = ByteBuffer.allocate(8192);
 
-    private Transformation next;
-    private boolean skipDecompression = false;
+    private volatile Transformation next;
+    private volatile boolean skipDecompression = false;
 
     static PerMessageDeflate negotiate(List<List<Parameter>> preferences) {
         // Accept the first preference that the server is able to support
@@ -288,11 +289,24 @@ public class PerMessageDeflate implements Transformation {
 
     @Override
     public List<MessagePart> sendMessagePart(List<MessagePart> messageParts) {
-        // TODO: Implement compression of sent messages
+        List<MessagePart> compressedParts = new ArrayList<>(messageParts.size());
+
+        for (MessagePart messagePart : messageParts) {
+            byte opCode = messagePart.getOpCode();
+            if (Util.isControl(opCode)) {
+                // Control messages can appear in the middle of other messages
+                // and must not be compressed. Pass it straight through
+                compressedParts.add(messagePart);
+            } else {
+                // TODO: Implement compression of sent messages
+                compressedParts.add(messagePart);
+            }
+        }
+
         if (next == null) {
-            return messageParts;
+            return compressedParts;
         } else {
-            return next.sendMessagePart(messageParts);
+            return next.sendMessagePart(compressedParts);
         }
     }
 }

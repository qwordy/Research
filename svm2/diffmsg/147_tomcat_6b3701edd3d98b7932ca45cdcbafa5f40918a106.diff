commit 6b3701edd3d98b7932ca45cdcbafa5f40918a106
Author: Mark Emlyn David Thomas <markt@apache.org>
Date:   Sun Sep 23 21:09:22 2012 +0000

    Some more low(ish) hanging fruit from the allocation hit list. This accounts for ~8% due to the way Thread stores names.
    
    git-svn-id: https://svn.apache.org/repos/asf/tomcat/trunk@1389145 13f79535-47bb-0310-9956-ffa450edef68

diff --git a/java/org/apache/catalina/connector/CoyoteAdapter.java b/java/org/apache/catalina/connector/CoyoteAdapter.java
index a60045b..e889e8f 100644
--- a/java/org/apache/catalina/connector/CoyoteAdapter.java
+++ b/java/org/apache/catalina/connector/CoyoteAdapter.java
@@ -42,6 +42,7 @@ import org.apache.tomcat.util.buf.B2CConverter;
 import org.apache.tomcat.util.buf.ByteChunk;
 import org.apache.tomcat.util.buf.CharChunk;
 import org.apache.tomcat.util.buf.MessageBytes;
+import org.apache.tomcat.util.collections.ConcurrentWeakHashMap;
 import org.apache.tomcat.util.http.Cookies;
 import org.apache.tomcat.util.http.ServerCookie;
 import org.apache.tomcat.util.net.SSLSupport;
@@ -103,6 +104,9 @@ public class CoyoteAdapter implements Adapter {
     private final Connector connector;
 
 
+    private final ConcurrentWeakHashMap<Thread,String> threadNames =
+            new ConcurrentWeakHashMap<>();
+
     /**
      * The string manager for this package.
      */
@@ -427,7 +431,13 @@ public class CoyoteAdapter implements Adapter {
 
             // Parse and set Catalina and configuration specific
             // request parameters
-            req.getRequestProcessor().setWorkerThreadName(Thread.currentThread().getName());
+            Thread t = Thread.currentThread();
+            String threadName = threadNames.get(t);
+            if (threadName == null) {
+                threadName = t.getName();
+                threadNames.put(t, threadName);
+            }
+            req.getRequestProcessor().setWorkerThreadName(threadName);
             boolean postParseSuccess = postParseRequest(req, request, res, response);
             if (postParseSuccess) {
                 //check valves if we support async
diff --git a/java/org/apache/tomcat/util/collections/ConcurrentWeakHashMap.java b/java/org/apache/tomcat/util/collections/ConcurrentWeakHashMap.java
new file mode 100644
index 0000000..8280dbd
--- /dev/null
+++ b/java/org/apache/tomcat/util/collections/ConcurrentWeakHashMap.java
@@ -0,0 +1,53 @@
+/*
+ * Licensed to the Apache Software Foundation (ASF) under one or more
+ * contributor license agreements.  See the NOTICE file distributed with
+ * this work for additional information regarding copyright ownership.
+ * The ASF licenses this file to You under the Apache License, Version 2.0
+ * (the "License"); you may not use this file except in compliance with
+ * the License.  You may obtain a copy of the License at
+ *
+ *     http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+package org.apache.tomcat.util.collections;
+
+import java.util.WeakHashMap;
+import java.util.concurrent.locks.Lock;
+import java.util.concurrent.locks.ReadWriteLock;
+import java.util.concurrent.locks.ReentrantReadWriteLock;
+
+/**
+ * Wraps a WeakHashMap and makes it thread safe when the typical usage is few
+ * writes and many reads. This class deliberately does not provide access to the
+ * full Map interface. It only exposes the methods required by Tomcat.
+ */
+public class ConcurrentWeakHashMap<K,V> {
+
+    private final ReadWriteLock lock = new ReentrantReadWriteLock();
+    private final Lock readLock = lock.readLock();
+    private final Lock writeLock = lock.writeLock();
+    private final WeakHashMap<K,V> map = new WeakHashMap<>();
+
+    public V get(K k) {
+        readLock.lock();
+        try {
+            return map.get(k);
+        } finally {
+            readLock.unlock();
+        }
+    }
+
+    public V put(K k, V v) {
+        writeLock.lock();
+        try {
+            return map.put(k, v);
+        } finally {
+            writeLock.unlock();
+        }
+    }
+}

commit 59d02008c33e0fa5cedd0182db2a98989e8754dc
Author: Remy Maucherat <remm@apache.org>
Date:   Mon Oct 26 15:10:53 2015 +0000

    - Fix capacity check algorithm (overflow isn't the right result in that case).
    - Unwrap first in NIO2 and wait for an explicit underflow to read on the socket (I'll test adding a flag to optimize this since this is likely a bit expensive, but commit it for now since everything's now working).
    
    git-svn-id: https://svn.apache.org/repos/asf/tomcat/trunk@1710618 13f79535-47bb-0310-9956-ffa450edef68

diff --git a/java/org/apache/tomcat/util/net/SecureNio2Channel.java b/java/org/apache/tomcat/util/net/SecureNio2Channel.java
index 7161a45..2a9eb84 100644
--- a/java/org/apache/tomcat/util/net/SecureNio2Channel.java
+++ b/java/org/apache/tomcat/util/net/SecureNio2Channel.java
@@ -572,14 +572,9 @@ public class SecureNio2Channel extends Nio2Channel  {
 
     private class FutureRead implements Future<Integer> {
         private final ByteBuffer dst;
-        private final Future<Integer> integer;
+        private final Future<Integer> integer = null;
         private FutureRead(ByteBuffer dst) {
             this.dst = dst;
-            if (netInBuffer.position() > 0) {
-                this.integer = null;
-            } else {
-                this.integer = sc.read(netInBuffer);
-            }
         }
         @Override
         public boolean cancel(boolean mayInterruptIfRunning) {
@@ -837,11 +832,7 @@ public class SecureNio2Channel extends Nio2Channel  {
                 handler.failed(exc, attach);
             }
         };
-        if (netInBuffer.position() > 0) {
-            readCompletionHandler.completed(Integer.valueOf(netInBuffer.position()), attachment);
-        } else {
-            sc.read(netInBuffer, timeout, unit, attachment, readCompletionHandler);
-        }
+        readCompletionHandler.completed(Integer.valueOf(netInBuffer.position()), attachment);
     }
 
     @Override
diff --git a/java/org/apache/tomcat/util/net/openssl/OpenSSLEngine.java b/java/org/apache/tomcat/util/net/openssl/OpenSSLEngine.java
index 066d260..1f6ac7c 100644
--- a/java/org/apache/tomcat/util/net/openssl/OpenSSLEngine.java
+++ b/java/org/apache/tomcat/util/net/openssl/OpenSSLEngine.java
@@ -571,13 +571,12 @@ public final class OpenSSLEngine extends SSLEngine implements SSLUtil.ProtocolIn
         int pendingApp = (handshakeFinished || SSL.isInInit(ssl) == 0) ? SSL.pendingReadableBytesInSSL(ssl) : 0;
         int bytesProduced = 0;
         int idx = offset;
+        // Do we have enough room in dsts to write decrypted data?
+        if (capacity < pendingApp) {
+            return new SSLEngineResult(SSLEngineResult.Status.BUFFER_OVERFLOW, getHandshakeStatus(), bytesConsumed, 0);
+        }
 
         while (pendingApp > 0) {
-            // Do we have enough room in dsts to write decrypted data?
-            if (capacity < pendingApp) {
-                return new SSLEngineResult(SSLEngineResult.Status.BUFFER_OVERFLOW, getHandshakeStatus(), bytesConsumed, 0);
-            }
-
             // Write decrypted data to dsts buffers
             while (idx < endOffset) {
                 ByteBuffer dst = dsts[idx];
@@ -612,6 +611,8 @@ public final class OpenSSLEngine extends SSLEngine implements SSLUtil.ProtocolIn
             if (pendingApp == 0) {
                 primingSSLRead();
                 pendingApp = SSL.pendingReadableBytesInSSL(ssl);
+            } else if (capacity == 0) {
+                break;
             }
         }
 

commit c1f07ca022d7036c6170868cba01b159bae78385
Author: Mark Emlyn David Thomas <markt@apache.org>
Date:   Tue Mar 19 22:51:15 2013 +0000

    As highlighted by the Autobahn tests, a protocol error needs to force an immediate close. The server can't wait for a echoed close frame from a connection that is in an unknown state.
    
    git-svn-id: https://svn.apache.org/repos/asf/tomcat/trunk@1458559 13f79535-47bb-0310-9956-ffa450edef68

diff --git a/java/org/apache/tomcat/websocket/WsSession.java b/java/org/apache/tomcat/websocket/WsSession.java
index f7beedd..7de43dc 100644
--- a/java/org/apache/tomcat/websocket/WsSession.java
+++ b/java/org/apache/tomcat/websocket/WsSession.java
@@ -345,8 +345,10 @@ public class WsSession implements Session {
 
     /**
      * Called when a close message is received. Should only ever happen once.
+     * Also called after a protocol error when the ProtocolHandler needs to
+     * force the closing of the connection.
      */
-    void onClose(CloseReason closeReason) {
+    public void onClose(CloseReason closeReason) {
 
         boolean sendCloseMessage = false;
 
diff --git a/java/org/apache/tomcat/websocket/server/LocalStrings.properties b/java/org/apache/tomcat/websocket/server/LocalStrings.properties
index 4ce1381..f6f61d9 100644
--- a/java/org/apache/tomcat/websocket/server/LocalStrings.properties
+++ b/java/org/apache/tomcat/websocket/server/LocalStrings.properties
@@ -24,6 +24,4 @@ serverContainer.servletContextMissing=No ServletContext was specified
 
 uriTemplate.noMatch=The input template [{0}] generated the pattern [{1}] which did not match the supplied pathInfo [{2}]
 
-wsProtocolHandler.closeFailed=Failed to close the WebSocket connection cleanly
-
 wsRemoteEndpointServer.closeFailed=Failed to close the ServletOutputStream connection cleanly
\ No newline at end of file
diff --git a/java/org/apache/tomcat/websocket/server/WsProtocolHandler.java b/java/org/apache/tomcat/websocket/server/WsProtocolHandler.java
index eb08f8d..46ef698 100644
--- a/java/org/apache/tomcat/websocket/server/WsProtocolHandler.java
+++ b/java/org/apache/tomcat/websocket/server/WsProtocolHandler.java
@@ -32,9 +32,6 @@ import javax.websocket.DeploymentException;
 import javax.websocket.Endpoint;
 import javax.websocket.EndpointConfig;
 
-import org.apache.juli.logging.Log;
-import org.apache.juli.logging.LogFactory;
-import org.apache.tomcat.util.res.StringManager;
 import org.apache.tomcat.websocket.WsIOException;
 import org.apache.tomcat.websocket.WsSession;
 
@@ -43,11 +40,6 @@ import org.apache.tomcat.websocket.WsSession;
  */
 public class WsProtocolHandler implements HttpUpgradeHandler {
 
-    private static final StringManager sm =
-            StringManager.getManager(Constants.PACKAGE_NAME);
-    private static final Log log =
-            LogFactory.getLog(WsProtocolHandler.class);
-
     private final Endpoint ep;
     private final EndpointConfig endpointConfig;
     private final ClassLoader applicationClassLoader;
@@ -132,13 +124,15 @@ public class WsProtocolHandler implements HttpUpgradeHandler {
 
 
     private void close(CloseReason cr) {
-        try {
-            wsSession.close(cr);
-        } catch (IOException e) {
-            if (log.isInfoEnabled()) {
-                log.info(sm.getString("wsProtocolHandler.closeFailed"), e);
-            }
-        }
+        /*
+         * Any call to this method is a result of a problem reading from the
+         * client. At this point that state of the connection is unknown.
+         * Attempt to send a close frame to the client and then close the socket
+         * immediately. There is no point in waiting for a close frame from the
+         * client because there is no guarantee that we can recover from
+         * whatever messed up state the client put the connection into.
+         */
+        wsSession.onClose(cr);
     }
 
 

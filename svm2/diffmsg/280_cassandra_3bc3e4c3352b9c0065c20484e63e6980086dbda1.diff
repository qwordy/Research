commit 3bc3e4c3352b9c0065c20484e63e6980086dbda1
Author: Jonathan Ellis <jbellis@apache.org>
Date:   Mon May 4 19:01:56 2009 +0000

    add constructor to DTPE for most commonly used values (single thread, no timeout, LinkedBlockingQueue)
    patch by jbellis; reviewed by nk11 for CASSANDRA-120
    
    git-svn-id: https://svn.apache.org/repos/asf/incubator/cassandra/trunk@771399 13f79535-47bb-0310-9956-ffa450edef68

diff --git a/src/java/org/apache/cassandra/concurrent/DebuggableThreadPoolExecutor.java b/src/java/org/apache/cassandra/concurrent/DebuggableThreadPoolExecutor.java
index aaeffba..b72ed35 100644
--- a/src/java/org/apache/cassandra/concurrent/DebuggableThreadPoolExecutor.java
+++ b/src/java/org/apache/cassandra/concurrent/DebuggableThreadPoolExecutor.java
@@ -34,8 +34,13 @@ import org.apache.cassandra.utils.*;
 
 public class DebuggableThreadPoolExecutor extends ThreadPoolExecutor
 {
-    private static Logger logger_ = Logger.getLogger(DebuggableThreadPoolExecutor.class);    
-    
+    private static Logger logger_ = Logger.getLogger(DebuggableThreadPoolExecutor.class);
+
+    public DebuggableThreadPoolExecutor(String threadPoolName) 
+    {
+        this(1, 1, Integer.MAX_VALUE, TimeUnit.SECONDS, new LinkedBlockingQueue<Runnable>(), new ThreadFactoryImpl(threadPoolName));
+    }
+
     public DebuggableThreadPoolExecutor(int corePoolSize,
             int maximumPoolSize,
             long keepAliveTime,
diff --git a/src/java/org/apache/cassandra/concurrent/SingleThreadedStage.java b/src/java/org/apache/cassandra/concurrent/SingleThreadedStage.java
index 249394a..27ae871 100644
--- a/src/java/org/apache/cassandra/concurrent/SingleThreadedStage.java
+++ b/src/java/org/apache/cassandra/concurrent/SingleThreadedStage.java
@@ -40,15 +40,8 @@ public class SingleThreadedStage implements IStage
 
 	public SingleThreadedStage(String name)
     {
-        //executorService_ = new DebuggableScheduledThreadPoolExecutor(1,new ThreadFactoryImpl(name));
-        executorService_ = new DebuggableThreadPoolExecutor( 1,
-                1,
-                Integer.MAX_VALUE,
-                TimeUnit.SECONDS,
-                new LinkedBlockingQueue<Runnable>(),
-                new ThreadFactoryImpl(name)
-                );        
-        name_ = name;        
+        executorService_ = new DebuggableThreadPoolExecutor(name);
+        name_ = name;
 	}
 	
     /* Implementing the IStage interface methods */
diff --git a/src/java/org/apache/cassandra/db/BinaryMemtableManager.java b/src/java/org/apache/cassandra/db/BinaryMemtableManager.java
index ba22ef3..54cd46b 100644
--- a/src/java/org/apache/cassandra/db/BinaryMemtableManager.java
+++ b/src/java/org/apache/cassandra/db/BinaryMemtableManager.java
@@ -81,13 +81,7 @@ public class BinaryMemtableManager
         }
     }
     
-    private ExecutorService flusher_ = new DebuggableThreadPoolExecutor( 1,
-            1,
-            Integer.MAX_VALUE,
-            TimeUnit.SECONDS,
-            new LinkedBlockingQueue<Runnable>(),
-            new ThreadFactoryImpl("BINARY-MEMTABLE-FLUSHER-POOL")
-            );  
+    private ExecutorService flusher_ = new DebuggableThreadPoolExecutor("BINARY-MEMTABLE-FLUSHER-POOL");
     
     /* Submit memtables to be flushed to disk */
     void submit(String cfName, BinaryMemtable memtbl)
diff --git a/src/java/org/apache/cassandra/db/Memtable.java b/src/java/org/apache/cassandra/db/Memtable.java
index 57bc1d8..d460657 100644
--- a/src/java/org/apache/cassandra/db/Memtable.java
+++ b/src/java/org/apache/cassandra/db/Memtable.java
@@ -420,7 +420,7 @@ public class Memtable implements Comparable<Memtable>
 
         public MemtableThreadPoolExecutor()
         {
-            super(1, 1, Integer.MAX_VALUE, TimeUnit.SECONDS, new LinkedBlockingQueue<Runnable>(), new ThreadFactoryImpl("FAST-MEMTABLE-POOL"));
+            super("FAST-MEMTABLE-POOL");
         }
 
         protected void terminated()
diff --git a/src/java/org/apache/cassandra/db/MemtableManager.java b/src/java/org/apache/cassandra/db/MemtableManager.java
index 43a4f86..0dcd03e 100644
--- a/src/java/org/apache/cassandra/db/MemtableManager.java
+++ b/src/java/org/apache/cassandra/db/MemtableManager.java
@@ -93,13 +93,7 @@ public class MemtableManager
     }
     
     private Map<String, List<Memtable>> history_ = new HashMap<String, List<Memtable>>();
-    ExecutorService flusher_ = new DebuggableThreadPoolExecutor( 1,
-            1,
-            Integer.MAX_VALUE,
-            TimeUnit.SECONDS,
-            new LinkedBlockingQueue<Runnable>(),
-            new ThreadFactoryImpl("MEMTABLE-FLUSHER-POOL")
-            );  
+    ExecutorService flusher_ = new DebuggableThreadPoolExecutor("MEMTABLE-FLUSHER-POOL");
     
     /* Submit memtables to be flushed to disk */
     void submit(String cfName, Memtable memtbl, CommitLog.CommitLogContext cLogCtx)
diff --git a/src/java/org/apache/cassandra/net/MessagingService.java b/src/java/org/apache/cassandra/net/MessagingService.java
index aed08c4..b884cd3 100644
--- a/src/java/org/apache/cassandra/net/MessagingService.java
+++ b/src/java/org/apache/cassandra/net/MessagingService.java
@@ -219,13 +219,7 @@ public class MessagingService implements IMessagingService, MessagingServiceMBea
                 new ThreadFactoryImpl("MESSAGE-DESERIALIZER-POOL")
                 ); 
         
-        streamExecutor_ = new DebuggableThreadPoolExecutor( 1,
-                1,
-                Integer.MAX_VALUE,
-                TimeUnit.SECONDS,
-                new LinkedBlockingQueue<Runnable>(),
-                new ThreadFactoryImpl("MESSAGE-STREAMING-POOL")
-                ); 
+        streamExecutor_ = new DebuggableThreadPoolExecutor("MESSAGE-STREAMING-POOL");
                 
         protocol_ = hash(HashingSchemes.MD5, "FB-MESSAGING".getBytes());        
         /* register the response verb handler */
diff --git a/src/java/org/apache/cassandra/service/LeaderElector.java b/src/java/org/apache/cassandra/service/LeaderElector.java
index 9191b4b..3041233 100644
--- a/src/java/org/apache/cassandra/service/LeaderElector.java
+++ b/src/java/org/apache/cassandra/service/LeaderElector.java
@@ -80,13 +80,7 @@ class LeaderElector implements IEndPointStateChangeSubscriber
     /* The elected leader. */
     private AtomicReference<EndPoint> leader_;
     private Condition condition_;
-    private ExecutorService leaderElectionService_ = new DebuggableThreadPoolExecutor(1,
-            1,
-            Integer.MAX_VALUE,
-            TimeUnit.SECONDS,
-            new LinkedBlockingQueue<Runnable>(),
-            new ThreadFactoryImpl("LEADER-ELECTOR")
-            );
+    private ExecutorService leaderElectionService_ = new DebuggableThreadPoolExecutor("LEADER-ELECTOR");
     
     private class LeaderDeathMonitor implements Runnable
     {
diff --git a/src/java/org/apache/cassandra/service/StorageLoadBalancer.java b/src/java/org/apache/cassandra/service/StorageLoadBalancer.java
index 1c82777..5f1b517 100644
--- a/src/java/org/apache/cassandra/service/StorageLoadBalancer.java
+++ b/src/java/org/apache/cassandra/service/StorageLoadBalancer.java
@@ -187,13 +187,7 @@ final class StorageLoadBalancer implements IEndPointStateChangeSubscriber, IComp
             new ThreadFactoryImpl("LB-OPERATIONS")
             );
     /* This thread pool is used by target node to leave the ring. */
-    private ExecutorService lbOperations_ = new DebuggableThreadPoolExecutor(1,
-            1,
-            Integer.MAX_VALUE,
-            TimeUnit.SECONDS,
-            new LinkedBlockingQueue<Runnable>(),
-            new ThreadFactoryImpl("LB-TARGET")
-            );
+    private ExecutorService lbOperations_ = new DebuggableThreadPoolExecutor("LB-TARGET");
 
     StorageLoadBalancer(StorageService storageService)
     {
diff --git a/src/java/org/apache/cassandra/service/StorageService.java b/src/java/org/apache/cassandra/service/StorageService.java
index e1f86a2..7b95c4c 100644
--- a/src/java/org/apache/cassandra/service/StorageService.java
+++ b/src/java/org/apache/cassandra/service/StorageService.java
@@ -250,10 +250,7 @@ public final class StorageService implements IEndPointStateChangeSubscriber, Sto
     private AtomicBoolean isShutdown_ = new AtomicBoolean(false);
 
     /* This thread pool is used to do the bootstrap for a new node */
-    private ExecutorService bootStrapper_ = new DebuggableThreadPoolExecutor(1, 1,
-            Integer.MAX_VALUE, TimeUnit.SECONDS,
-            new LinkedBlockingQueue<Runnable>(), new ThreadFactoryImpl(
-                    "BOOT-STRAPPER"));
+    private ExecutorService bootStrapper_ = new DebuggableThreadPoolExecutor("BOOT-STRAPPER");
     
     /* This thread pool does consistency checks when the client doesn't care about consistency */
     private ExecutorService consistencyManager_;
diff --git a/src/java/org/apache/cassandra/utils/FileUtils.java b/src/java/org/apache/cassandra/utils/FileUtils.java
index 50a5530..86d01cd 100644
--- a/src/java/org/apache/cassandra/utils/FileUtils.java
+++ b/src/java/org/apache/cassandra/utils/FileUtils.java
@@ -45,13 +45,7 @@ public class FileUtils
     private static final double gb_ = 1024*1024*1024d;
     private static final double tb_ = 1024*1024*1024*1024d;
 
-    private static ExecutorService deleter_ = new DebuggableThreadPoolExecutor( 1,
-            1,
-            Integer.MAX_VALUE,
-            TimeUnit.SECONDS,
-            new LinkedBlockingQueue<Runnable>(),
-            new ThreadFactoryImpl("FILEUTILS-DELETE-POOL")
-            );
+    private static ExecutorService deleter_ = new DebuggableThreadPoolExecutor("FILEUTILS-DELETE-POOL");
 
     public static void shutdown()
     {

commit b914d9892de88bfd3045333b1719186211dc3be6
Author: Mark Thomas <markt@apache.org>
Date:   Wed Apr 27 11:33:20 2016 +0000

    Review of Map / ConcurrentMap / ConcurrentHashMap
    Declare field using interface rather than implementation.
    Also:
    - Use final
    
    git-svn-id: https://svn.apache.org/repos/asf/tomcat/trunk@1741232 13f79535-47bb-0310-9956-ffa450edef68

diff --git a/java/org/apache/tomcat/InstanceManagerBindings.java b/java/org/apache/tomcat/InstanceManagerBindings.java
index 3c0fd6f..66bc61a 100644
--- a/java/org/apache/tomcat/InstanceManagerBindings.java
+++ b/java/org/apache/tomcat/InstanceManagerBindings.java
@@ -16,12 +16,12 @@
  */
 package org.apache.tomcat;
 
+import java.util.Map;
 import java.util.concurrent.ConcurrentHashMap;
 
 public final class InstanceManagerBindings {
 
-    private static final ConcurrentHashMap<ClassLoader, InstanceManager> bindings =
-            new ConcurrentHashMap<>();
+    private static final Map<ClassLoader, InstanceManager> bindings = new ConcurrentHashMap<>();
 
     public static final void bind(ClassLoader classLoader, InstanceManager instanceManager) {
         bindings.put(classLoader, instanceManager);
diff --git a/java/org/apache/tomcat/jni/SSLContext.java b/java/org/apache/tomcat/jni/SSLContext.java
index 4ed006d..50a2908 100644
--- a/java/org/apache/tomcat/jni/SSLContext.java
+++ b/java/org/apache/tomcat/jni/SSLContext.java
@@ -415,7 +415,7 @@ public final class SSLContext {
      * since a Tomcat instance may have several TLS enabled endpoints that each
      * have different SSL Context mappings for the same host name.
      */
-    private static Map<Long,SNICallBack> sniCallBacks = new ConcurrentHashMap<>();
+    private static final Map<Long,SNICallBack> sniCallBacks = new ConcurrentHashMap<>();
 
     /**
      * Register an OpenSSL SSLContext that will be used to initiate TLS
diff --git a/java/org/apache/tomcat/util/http/FastHttpDateFormat.java b/java/org/apache/tomcat/util/http/FastHttpDateFormat.java
index c820f22..f30c04b 100644
--- a/java/org/apache/tomcat/util/http/FastHttpDateFormat.java
+++ b/java/org/apache/tomcat/util/http/FastHttpDateFormat.java
@@ -21,6 +21,7 @@ import java.text.ParseException;
 import java.text.SimpleDateFormat;
 import java.util.Date;
 import java.util.Locale;
+import java.util.Map;
 import java.util.TimeZone;
 import java.util.concurrent.ConcurrentHashMap;
 
@@ -75,15 +76,13 @@ public final class FastHttpDateFormat {
     /**
      * Formatter cache.
      */
-    private static final ConcurrentHashMap<Long, String> formatCache =
-            new ConcurrentHashMap<>(CACHE_SIZE);
+    private static final Map<Long, String> formatCache = new ConcurrentHashMap<>(CACHE_SIZE);
 
 
     /**
      * Parser cache.
      */
-    private static final ConcurrentHashMap<String, Long> parseCache =
-            new ConcurrentHashMap<>(CACHE_SIZE);
+    private static final Map<String, Long> parseCache = new ConcurrentHashMap<>(CACHE_SIZE);
 
 
     // --------------------------------------------------------- Public Methods
diff --git a/java/org/apache/tomcat/websocket/server/WsServerContainer.java b/java/org/apache/tomcat/websocket/server/WsServerContainer.java
index 1cf519c..11b3305 100644
--- a/java/org/apache/tomcat/websocket/server/WsServerContainer.java
+++ b/java/org/apache/tomcat/websocket/server/WsServerContainer.java
@@ -83,13 +83,12 @@ public class WsServerContainer extends WsWebSocketContainer
     private final ServletContext servletContext;
     private final Map<String,ServerEndpointConfig> configExactMatchMap =
             new ConcurrentHashMap<>();
-    private final ConcurrentHashMap<Integer,SortedSet<TemplatePathMatch>>
-            configTemplateMatchMap = new ConcurrentHashMap<>();
+    private final Map<Integer,SortedSet<TemplatePathMatch>> configTemplateMatchMap =
+            new ConcurrentHashMap<>();
     private volatile boolean enforceNoAddAfterHandshake =
             org.apache.tomcat.websocket.Constants.STRICT_SPEC_COMPLIANCE;
     private volatile boolean addAllowed = true;
-    private final ConcurrentHashMap<String,Set<WsSession>> authenticatedSessions =
-            new ConcurrentHashMap<>();
+    private final Map<String,Set<WsSession>> authenticatedSessions = new ConcurrentHashMap<>();
     private final ExecutorService executorService;
     private final ThreadGroup threadGroup;
     private volatile boolean endpointsRegistered = false;

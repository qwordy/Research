commit 0365927951e1a80083f384dbf3988cbfd5b393b0
Author: Scott Mitchell <scott_mitchell@apple.com>
Date:   Thu Aug 27 15:21:30 2015 -0700

    HTTP/2 InboundHttp2ToHttpAdapterTest race condition
    
    Motivation:
    The latches in InboundHttp2ToHttpAdapterTest were volatile and reset during the tests. This resulted in race conditions and sometimes the tests would be waiting on old latches that were not the same latches being counted down when messages were received.
    
    Modifications:
    - Remove volatile latches from tests
    
    Result:
    More reliable tests with less race conditions.

diff --git a/codec-http2/src/test/java/io/netty/handler/codec/http2/Http2FrameRoundtripTest.java b/codec-http2/src/test/java/io/netty/handler/codec/http2/Http2FrameRoundtripTest.java
index c8afad5..98d5795 100644
--- a/codec-http2/src/test/java/io/netty/handler/codec/http2/Http2FrameRoundtripTest.java
+++ b/codec-http2/src/test/java/io/netty/handler/codec/http2/Http2FrameRoundtripTest.java
@@ -72,7 +72,7 @@ public class Http2FrameRoundtripTest {
     private Bootstrap cb;
     private Channel serverChannel;
     private Channel clientChannel;
-    private volatile CountDownLatch requestLatch;
+    private CountDownLatch requestLatch;
     private Http2TestUtil.FrameAdapter serverAdapter;
 
     @Before
diff --git a/codec-http2/src/test/java/io/netty/handler/codec/http2/InboundHttp2ToHttpAdapterTest.java b/codec-http2/src/test/java/io/netty/handler/codec/http2/InboundHttp2ToHttpAdapterTest.java
index 67e92a1..aaa709b 100644
--- a/codec-http2/src/test/java/io/netty/handler/codec/http2/InboundHttp2ToHttpAdapterTest.java
+++ b/codec-http2/src/test/java/io/netty/handler/codec/http2/InboundHttp2ToHttpAdapterTest.java
@@ -63,7 +63,6 @@ import static java.util.concurrent.TimeUnit.MILLISECONDS;
 import static java.util.concurrent.TimeUnit.SECONDS;
 import static org.junit.Assert.assertEquals;
 import static org.junit.Assert.assertTrue;
-import static org.mockito.Mockito.reset;
 import static org.mockito.Mockito.times;
 import static org.mockito.Mockito.verify;
 
@@ -90,9 +89,9 @@ public class InboundHttp2ToHttpAdapterTest {
     private Channel serverChannel;
     private Channel serverConnectedChannel;
     private Channel clientChannel;
-    private volatile CountDownLatch serverLatch;
-    private volatile CountDownLatch clientLatch;
-    private volatile CountDownLatch settingsLatch;
+    private CountDownLatch serverLatch;
+    private CountDownLatch clientLatch;
+    private CountDownLatch settingsLatch;
     private int maxContentLength;
     private HttpResponseDelegator serverDelegator;
     private HttpResponseDelegator clientDelegator;
@@ -102,81 +101,6 @@ public class InboundHttp2ToHttpAdapterTest {
     @Before
     public void setup() throws Exception {
         MockitoAnnotations.initMocks(this);
-
-        clientDelegator = null;
-        serverDelegator = null;
-        serverConnectedChannel = null;
-        maxContentLength = 1024;
-        setServerLatch(1);
-        setClientLatch(1);
-        setSettingsLatch(1);
-        frameWriter = new DefaultHttp2FrameWriter();
-
-        sb = new ServerBootstrap();
-        cb = new Bootstrap();
-
-        sb.group(new DefaultEventLoopGroup());
-        sb.channel(LocalServerChannel.class);
-        sb.childHandler(new ChannelInitializer<Channel>() {
-            @Override
-            protected void initChannel(Channel ch) throws Exception {
-                ChannelPipeline p = ch.pipeline();
-                Http2Connection connection = new DefaultHttp2Connection(true);
-
-                p.addLast(new HttpAdapterFrameAdapter(
-                        connection,
-                        new InboundHttp2ToHttpPriorityAdapter.Builder(connection)
-                                .maxContentLength(maxContentLength)
-                                .validateHttpHeaders(true)
-                                .propagateSettings(true)
-                                .build(),
-                        new CountDownLatch(10)));
-
-                serverDelegator = new HttpResponseDelegator(serverListener, serverLatch);
-                p.addLast(serverDelegator);
-                serverConnectedChannel = ch;
-                settingsDelegator = new HttpSettingsDelegator(settingsListener, settingsLatch);
-                p.addLast(settingsDelegator);
-                p.addLast(new ChannelHandlerAdapter() {
-                    @Override
-                    public void exceptionCaught(ChannelHandlerContext ctx, Throwable cause) throws Exception {
-                        Http2Exception e = getEmbeddedHttp2Exception(cause);
-                        if (e != null) {
-                            serverException = e;
-                            serverLatch.countDown();
-                        } else {
-                            super.exceptionCaught(ctx, cause);
-                        }
-                    }
-                });
-            }
-        });
-
-        cb.group(new DefaultEventLoopGroup());
-        cb.channel(LocalChannel.class);
-        cb.handler(new ChannelInitializer<Channel>() {
-            @Override
-            protected void initChannel(Channel ch) throws Exception {
-                ChannelPipeline p = ch.pipeline();
-                Http2Connection connection = new DefaultHttp2Connection(false);
-
-                p.addLast(new HttpAdapterFrameAdapter(
-                        connection,
-                        new InboundHttp2ToHttpPriorityAdapter.Builder(connection)
-                                .maxContentLength(maxContentLength)
-                                .build(),
-                        new CountDownLatch(10)));
-
-                clientDelegator = new HttpResponseDelegator(clientListener, clientLatch);
-                p.addLast(clientDelegator);
-            }
-        });
-
-        serverChannel = sb.bind(new LocalAddress("InboundHttp2ToHttpAdapterTest")).sync().channel();
-
-        ChannelFuture ccf = cb.connect(serverChannel.localAddress());
-        assertTrue(ccf.awaitUninterruptibly().isSuccess());
-        clientChannel = ccf.channel();
     }
 
     @After
@@ -204,6 +128,7 @@ public class InboundHttp2ToHttpAdapterTest {
 
     @Test
     public void clientRequestSingleHeaderNoDataFrames() throws Exception {
+        boostrapEnv(1, 1, 1);
         final FullHttpRequest request = new DefaultFullHttpRequest(HttpVersion.HTTP_1_1, HttpMethod.GET,
                 "/some/path/resource2", true);
         try {
@@ -234,6 +159,7 @@ public class InboundHttp2ToHttpAdapterTest {
 
     @Test
     public void clientRequestSingleHeaderNonAsciiShouldThrow() throws Exception {
+        boostrapEnv(1, 1, 1);
         final Http2Headers http2Headers = new DefaultHttp2Headers()
                 .method(new AsciiString("GET"))
                 .scheme(new AsciiString("https"))
@@ -254,6 +180,7 @@ public class InboundHttp2ToHttpAdapterTest {
 
     @Test
     public void clientRequestOneDataFrame() throws Exception {
+        boostrapEnv(1, 1, 1);
         final String text = "hello world";
         final ByteBuf content = Unpooled.copiedBuffer(text.getBytes());
         final FullHttpRequest request = new DefaultFullHttpRequest(HttpVersion.HTTP_1_1, HttpMethod.GET,
@@ -284,6 +211,7 @@ public class InboundHttp2ToHttpAdapterTest {
 
     @Test
     public void clientRequestMultipleDataFrames() throws Exception {
+        boostrapEnv(1, 1, 1);
         final String text = "hello world big time data!";
         final ByteBuf content = Unpooled.copiedBuffer(text.getBytes());
         final FullHttpRequest request = new DefaultFullHttpRequest(HttpVersion.HTTP_1_1, HttpMethod.GET,
@@ -318,6 +246,7 @@ public class InboundHttp2ToHttpAdapterTest {
 
     @Test
     public void clientRequestMultipleEmptyDataFrames() throws Exception {
+        boostrapEnv(1, 1, 1);
         final String text = "";
         final ByteBuf content = Unpooled.copiedBuffer(text.getBytes());
         final FullHttpRequest request = new DefaultFullHttpRequest(HttpVersion.HTTP_1_1, HttpMethod.GET,
@@ -350,6 +279,7 @@ public class InboundHttp2ToHttpAdapterTest {
 
     @Test
     public void clientRequestMultipleHeaders() throws Exception {
+        boostrapEnv(1, 1, 1);
         // writeHeaders will implicitly add an END_HEADERS tag each time and so this test does not follow the HTTP
         // message flow. We currently accept this message flow and just add the second headers to the trailing headers.
         final String text = "";
@@ -391,6 +321,7 @@ public class InboundHttp2ToHttpAdapterTest {
 
     @Test
     public void clientRequestTrailingHeaders() throws Exception {
+        boostrapEnv(1, 1, 1);
         final String text = "some data";
         final ByteBuf content = Unpooled.copiedBuffer(text.getBytes());
         final FullHttpRequest request = new DefaultFullHttpRequest(HttpVersion.HTTP_1_1, HttpMethod.GET,
@@ -430,7 +361,7 @@ public class InboundHttp2ToHttpAdapterTest {
 
     @Test
     public void clientRequestStreamDependencyInHttpMessageFlow() throws Exception {
-        setServerLatch(2);
+        boostrapEnv(1, 2, 1);
         final String text = "hello world big time data!";
         final ByteBuf content = Unpooled.copiedBuffer(text.getBytes());
         final String text2 = "hello world big time data...number 2!!";
@@ -477,7 +408,7 @@ public class InboundHttp2ToHttpAdapterTest {
 
     @Test
     public void clientRequestStreamDependencyOutsideHttpMessageFlow() throws Exception {
-        setServerLatch(3);
+        boostrapEnv(1, 3, 1);
         final String text = "hello world big time data!";
         final ByteBuf content = Unpooled.copiedBuffer(text.getBytes());
         final String text2 = "hello world big time data...number 2!!";
@@ -532,7 +463,7 @@ public class InboundHttp2ToHttpAdapterTest {
 
     @Test
     public void serverRequestPushPromise() throws Exception {
-        setClientLatch(2);
+        boostrapEnv(2, 1, 1);
         final String text = "hello world big time data!";
         final ByteBuf content = Unpooled.copiedBuffer(text.getBytes());
         final String text2 = "hello world smaller data?";
@@ -601,6 +532,7 @@ public class InboundHttp2ToHttpAdapterTest {
 
     @Test
     public void serverResponseHeaderInformational() throws Exception {
+        boostrapEnv(2, 2, 1);
         final FullHttpMessage request = new DefaultFullHttpRequest(HttpVersion.HTTP_1_1, HttpMethod.PUT, "/info/test",
                 true);
         HttpHeaders httpHeaders = request.headers();
@@ -625,13 +557,6 @@ public class InboundHttp2ToHttpAdapterTest {
                     ctxClient().flush();
                 }
             });
-            awaitRequests();
-            ArgumentCaptor<FullHttpMessage> requestCaptor = ArgumentCaptor.forClass(FullHttpMessage.class);
-            verify(serverListener).messageReceived(requestCaptor.capture());
-            capturedRequests = requestCaptor.getAllValues();
-            assertEquals(request, capturedRequests.get(0));
-            cleanupCapturedRequests();
-            reset(serverListener);
 
             httpHeaders = response.headers();
             httpHeaders.setInt(HttpConversionUtil.ExtensionHeaderNames.STREAM_ID.text(), 3);
@@ -644,15 +569,7 @@ public class InboundHttp2ToHttpAdapterTest {
                     ctxServer().flush();
                 }
             });
-            awaitResponses();
-            ArgumentCaptor<FullHttpMessage> responseCaptor = ArgumentCaptor.forClass(FullHttpMessage.class);
-            verify(clientListener).messageReceived(responseCaptor.capture());
-            capturedResponses = responseCaptor.getAllValues();
-            assertEquals(response, capturedResponses.get(0));
-            cleanupCapturedResponses();
-            reset(clientListener);
 
-            setServerLatch(1);
             httpHeaders = request2.headers();
             httpHeaders.setInt(HttpHeaderNames.CONTENT_LENGTH, text.length());
             httpHeaders.remove(HttpHeaderNames.EXPECT);
@@ -663,13 +580,7 @@ public class InboundHttp2ToHttpAdapterTest {
                     ctxClient().flush();
                 }
             });
-            awaitRequests();
-            requestCaptor = ArgumentCaptor.forClass(FullHttpMessage.class);
-            verify(serverListener).messageReceived(requestCaptor.capture());
-            capturedRequests = requestCaptor.getAllValues();
-            assertEquals(request2, capturedRequests.get(0));
 
-            setClientLatch(1);
             httpHeaders = response2.headers();
             httpHeaders.setInt(HttpConversionUtil.ExtensionHeaderNames.STREAM_ID.text(), 3);
             httpHeaders.setInt(HttpHeaderNames.CONTENT_LENGTH, 0);
@@ -681,11 +592,22 @@ public class InboundHttp2ToHttpAdapterTest {
                     ctxServer().flush();
                 }
             });
+
+            awaitRequests();
+            ArgumentCaptor<FullHttpMessage> requestCaptor = ArgumentCaptor.forClass(FullHttpMessage.class);
+            verify(serverListener, times(2)).messageReceived(requestCaptor.capture());
+            capturedRequests = requestCaptor.getAllValues();
+            assertEquals(2, capturedRequests.size());
+            assertEquals(request, capturedRequests.get(0));
+            assertEquals(request2, capturedRequests.get(1));
+
             awaitResponses();
-            responseCaptor = ArgumentCaptor.forClass(FullHttpMessage.class);
-            verify(clientListener).messageReceived(responseCaptor.capture());
+            ArgumentCaptor<FullHttpMessage> responseCaptor = ArgumentCaptor.forClass(FullHttpMessage.class);
+            verify(clientListener, times(2)).messageReceived(responseCaptor.capture());
             capturedResponses = responseCaptor.getAllValues();
-            assertEquals(response2, capturedResponses.get(0));
+            assertEquals(2, capturedResponses.size());
+            assertEquals(response, capturedResponses.get(0));
+            assertEquals(response2, capturedResponses.get(1));
         } finally {
             request.release();
             request2.release();
@@ -696,6 +618,7 @@ public class InboundHttp2ToHttpAdapterTest {
 
     @Test
     public void propagateSettings() throws Exception {
+        boostrapEnv(1, 1, 1);
         final Http2Settings settings = new Http2Settings().pushEnabled(true);
         runInChannel(clientChannel, new Http2Runnable() {
             @Override
@@ -710,6 +633,84 @@ public class InboundHttp2ToHttpAdapterTest {
         assertEquals(settings, settingsCaptor.getValue());
     }
 
+    private void boostrapEnv(int clientLatchCount, int serverLatchCount, int settingsLatchCount)
+            throws InterruptedException {
+        clientDelegator = null;
+        serverDelegator = null;
+        serverConnectedChannel = null;
+        maxContentLength = 1024;
+        serverLatch = new CountDownLatch(serverLatchCount);
+        clientLatch = new CountDownLatch(clientLatchCount);
+        settingsLatch = new CountDownLatch(settingsLatchCount);
+        frameWriter = new DefaultHttp2FrameWriter();
+
+        sb = new ServerBootstrap();
+        cb = new Bootstrap();
+
+        sb.group(new DefaultEventLoopGroup());
+        sb.channel(LocalServerChannel.class);
+        sb.childHandler(new ChannelInitializer<Channel>() {
+            @Override
+            protected void initChannel(Channel ch) throws Exception {
+                ChannelPipeline p = ch.pipeline();
+                Http2Connection connection = new DefaultHttp2Connection(true);
+
+                p.addLast(new HttpAdapterFrameAdapter(
+                        connection,
+                        new InboundHttp2ToHttpPriorityAdapter.Builder(connection)
+                                .maxContentLength(maxContentLength)
+                                .validateHttpHeaders(true)
+                                .propagateSettings(true)
+                                .build(),
+                        new CountDownLatch(10)));
+
+                serverDelegator = new HttpResponseDelegator(serverListener, serverLatch);
+                p.addLast(serverDelegator);
+                serverConnectedChannel = ch;
+                settingsDelegator = new HttpSettingsDelegator(settingsListener, settingsLatch);
+                p.addLast(settingsDelegator);
+                p.addLast(new ChannelHandlerAdapter() {
+                    @Override
+                    public void exceptionCaught(ChannelHandlerContext ctx, Throwable cause) throws Exception {
+                        Http2Exception e = getEmbeddedHttp2Exception(cause);
+                        if (e != null) {
+                            serverException = e;
+                            serverLatch.countDown();
+                        } else {
+                            super.exceptionCaught(ctx, cause);
+                        }
+                    }
+                });
+            }
+        });
+
+        cb.group(new DefaultEventLoopGroup());
+        cb.channel(LocalChannel.class);
+        cb.handler(new ChannelInitializer<Channel>() {
+            @Override
+            protected void initChannel(Channel ch) throws Exception {
+                ChannelPipeline p = ch.pipeline();
+                Http2Connection connection = new DefaultHttp2Connection(false);
+
+                p.addLast(new HttpAdapterFrameAdapter(
+                        connection,
+                        new InboundHttp2ToHttpPriorityAdapter.Builder(connection)
+                                .maxContentLength(maxContentLength)
+                                .build(),
+                        new CountDownLatch(10)));
+
+                clientDelegator = new HttpResponseDelegator(clientListener, clientLatch);
+                p.addLast(clientDelegator);
+            }
+        });
+
+        serverChannel = sb.bind(new LocalAddress("InboundHttp2ToHttpAdapterTest")).sync().channel();
+
+        ChannelFuture ccf = cb.connect(serverChannel.localAddress());
+        assertTrue(ccf.awaitUninterruptibly().isSuccess());
+        clientChannel = ccf.channel();
+    }
+
     private void cleanupCapturedRequests() {
         if (capturedRequests != null) {
             for (FullHttpMessage capturedRequest : capturedRequests) {
@@ -728,27 +729,6 @@ public class InboundHttp2ToHttpAdapterTest {
         }
     }
 
-    private void setServerLatch(int count) {
-        serverLatch = new CountDownLatch(count);
-        if (serverDelegator != null) {
-            serverDelegator.latch(serverLatch);
-        }
-    }
-
-    private void setClientLatch(int count) {
-        clientLatch = new CountDownLatch(count);
-        if (clientDelegator != null) {
-            clientDelegator.latch(clientLatch);
-        }
-    }
-
-    private void setSettingsLatch(int count) {
-        settingsLatch = new CountDownLatch(count);
-        if (settingsDelegator != null) {
-            settingsDelegator.latch(settingsLatch);
-        }
-    }
-
     private void awaitRequests() throws Exception {
         assertTrue(serverLatch.await(2, SECONDS));
     }
@@ -783,7 +763,7 @@ public class InboundHttp2ToHttpAdapterTest {
 
     private static final class HttpResponseDelegator extends SimpleChannelInboundHandler<HttpObject> {
         private final HttpResponseListener listener;
-        private volatile CountDownLatch latch;
+        private final CountDownLatch latch;
 
         HttpResponseDelegator(HttpResponseListener listener, CountDownLatch latch) {
             super(false);
@@ -796,15 +776,11 @@ public class InboundHttp2ToHttpAdapterTest {
             listener.messageReceived(msg);
             latch.countDown();
         }
-
-        public void latch(CountDownLatch latch) {
-            this.latch = latch;
-        }
     }
 
     private static final class HttpSettingsDelegator extends SimpleChannelInboundHandler<Http2Settings> {
         private final HttpSettingsListener listener;
-        private volatile CountDownLatch latch;
+        private final CountDownLatch latch;
 
         HttpSettingsDelegator(HttpSettingsListener listener, CountDownLatch latch) {
             super(false);
@@ -817,10 +793,6 @@ public class InboundHttp2ToHttpAdapterTest {
             listener.messageReceived(settings);
             latch.countDown();
         }
-
-        public void latch(CountDownLatch latch) {
-            this.latch = latch;
-        }
     }
 
     private static final class HttpAdapterFrameAdapter extends FrameAdapter {

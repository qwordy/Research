commit 64a75e793d1ee71e7c5a06b698d0e2b580ba0fb6
Author: Remy Maucherat <remm@apache.org>
Date:   Mon Nov 2 15:20:44 2015 +0000

    - Tentative patch for the elusive 57799: some blocking IO code uses InputStream.available() (a useless call that has always been in the java.io API). Following the introduction of non blocking, available() now causes real IO to occur. While this should be mostly harmless for APR and NIO (which can "read" 0 bytes), it would leave an async read pending with NIO2. The read IO operation will now not occur unless a read listener has been set (in which case available() is mostly equivalent to the newer isReady() method).
    - Will wait until the fix is confirmed to work to port to 8, if not I will rework this.
    
    git-svn-id: https://svn.apache.org/repos/asf/tomcat/trunk@1712044 13f79535-47bb-0310-9956-ffa450edef68

diff --git a/java/org/apache/catalina/connector/InputBuffer.java b/java/org/apache/catalina/connector/InputBuffer.java
index 905645c..e72540b 100644
--- a/java/org/apache/catalina/connector/InputBuffer.java
+++ b/java/org/apache/catalina/connector/InputBuffer.java
@@ -224,7 +224,7 @@ public class InputBuffer extends Reader
             available = cb.getLength();
         }
         if (available == 0) {
-            coyoteRequest.action(ActionCode.AVAILABLE, null);
+            coyoteRequest.action(ActionCode.AVAILABLE, Boolean.valueOf(coyoteRequest.getReadListener() != null));
             available = (coyoteRequest.getAvailable() > 0) ? 1 : 0;
         }
         return available;
@@ -269,7 +269,7 @@ public class InputBuffer extends Reader
 
     public boolean isReady() {
         if (coyoteRequest.getReadListener() == null) {
-            throw new IllegalStateException("not in non blocking mode.");
+            throw new IllegalStateException(sm.getString("inputBuffer.requiresNonBlocking"));
         }
         if (isFinished()) {
             // If this is a non-container thread, need to trigger a read
diff --git a/java/org/apache/catalina/connector/LocalStrings.properties b/java/org/apache/catalina/connector/LocalStrings.properties
index c99f667..63fc529 100644
--- a/java/org/apache/catalina/connector/LocalStrings.properties
+++ b/java/org/apache/catalina/connector/LocalStrings.properties
@@ -64,6 +64,7 @@ coyoteResponse.sendRedirect.note=<html><body><p>Redirecting to <a href="{0}">{0}
 coyoteResponse.setBufferSize.ise=Cannot change buffer size after data has been written
 
 inputBuffer.streamClosed=Stream closed
+inputBuffer.requiresNonBlocking=Not available in non blocking mode
 
 outputBuffer.writeNull=The String argument to write(String,int,int) may not be null
 
diff --git a/java/org/apache/coyote/http11/Http11InputBuffer.java b/java/org/apache/coyote/http11/Http11InputBuffer.java
index b87408d..7084a44 100644
--- a/java/org/apache/coyote/http11/Http11InputBuffer.java
+++ b/java/org/apache/coyote/http11/Http11InputBuffer.java
@@ -626,14 +626,14 @@ public class Http11InputBuffer implements InputBuffer {
      * Available bytes in the buffers (note that due to encoding, this may not
      * correspond).
      */
-    int available() {
+    int available(boolean read) {
         int available = lastValid - pos;
         if ((available == 0) && (lastActiveFilter >= 0)) {
             for (int i = 0; (available == 0) && (i <= lastActiveFilter); i++) {
                 available = activeFilters[i].available();
             }
         }
-        if (available > 0) {
+        if (available > 0 || !read) {
             return available;
         }
 
diff --git a/java/org/apache/coyote/http11/Http11Processor.java b/java/org/apache/coyote/http11/Http11Processor.java
index 069333f..2faf456 100644
--- a/java/org/apache/coyote/http11/Http11Processor.java
+++ b/java/org/apache/coyote/http11/Http11Processor.java
@@ -758,7 +758,7 @@ public class Http11Processor extends AbstractProcessor {
             break;
         }
         case AVAILABLE: {
-            request.setAvailable(inputBuffer.available());
+            request.setAvailable(inputBuffer.available(param == Boolean.TRUE));
             break;
         }
         case NB_WRITE_INTEREST: {

commit d451da79dca8496191435d0dc5557090eb5029a9
Author: Daniel Warneke <daniel.warneke@tu-berlin.de>
Date:   Wed Jul 27 17:56:54 2011 +0200

    Replaced synchronized HashMap by ConcurrentHashMap to improve performance

diff --git a/nephele/nephele-server/src/main/java/eu/stratosphere/nephele/taskmanager/bytebuffered/ByteBufferedChannelManager.java b/nephele/nephele-server/src/main/java/eu/stratosphere/nephele/taskmanager/bytebuffered/ByteBufferedChannelManager.java
index d4d2c3e..f5f8efc 100644
--- a/nephele/nephele-server/src/main/java/eu/stratosphere/nephele/taskmanager/bytebuffered/ByteBufferedChannelManager.java
+++ b/nephele/nephele-server/src/main/java/eu/stratosphere/nephele/taskmanager/bytebuffered/ByteBufferedChannelManager.java
@@ -57,7 +57,7 @@ public final class ByteBufferedChannelManager implements TransferEnvelopeDispatc
 	 */
 	private static final Log LOG = LogFactory.getLog(ByteBufferedChannelManager.class);
 
-	private final Map<ChannelID, ChannelContext> registeredChannels = new HashMap<ChannelID, ChannelContext>();
+	private final Map<ChannelID, ChannelContext> registeredChannels = new ConcurrentHashMap<ChannelID, ChannelContext>();
 
 	private final NetworkConnectionManager networkConnectionManager;
 
@@ -118,62 +118,59 @@ public final class ByteBufferedChannelManager implements TransferEnvelopeDispatc
 
 		final TaskContext taskContext = new TaskContext();
 
-		synchronized (this.registeredChannels) {
-
-			for (int i = 0; i < environment.getNumberOfOutputGates(); ++i) {
-				final OutputGate<?> outputGate = environment.getOutputGate(i);
-				final OutputGateContext outputGateContext = new OutputGateContext(taskContext, outputGate, this,
+		for (int i = 0; i < environment.getNumberOfOutputGates(); ++i) {
+			final OutputGate<?> outputGate = environment.getOutputGate(i);
+			final OutputGateContext outputGateContext = new OutputGateContext(taskContext, outputGate, this,
 					this.fileBufferManager);
-				for (int j = 0; j < outputGate.getNumberOfOutputChannels(); ++j) {
-					final AbstractOutputChannel<?> outputChannel = outputGate.getOutputChannel(j);
-					if (!(outputChannel instanceof AbstractByteBufferedOutputChannel)) {
-						LOG.error("Output channel " + outputChannel.getID() + "of job " + environment.getJobID()
+			for (int j = 0; j < outputGate.getNumberOfOutputChannels(); ++j) {
+				final AbstractOutputChannel<?> outputChannel = outputGate.getOutputChannel(j);
+				if (!(outputChannel instanceof AbstractByteBufferedOutputChannel)) {
+					LOG.error("Output channel " + outputChannel.getID() + "of job " + environment.getJobID()
 							+ " is not a byte buffered output channel, skipping...");
-						continue;
-					}
+					continue;
+				}
 
-					final AbstractByteBufferedOutputChannel<?> bboc = (AbstractByteBufferedOutputChannel<?>) outputChannel;
+				final AbstractByteBufferedOutputChannel<?> bboc = (AbstractByteBufferedOutputChannel<?>) outputChannel;
 
-					if (this.registeredChannels.containsKey(bboc.getID())) {
-						LOG.error("Byte buffered output channel " + bboc.getID() + " is already registered");
-						continue;
-					}
+				if (this.registeredChannels.containsKey(bboc.getID())) {
+					LOG.error("Byte buffered output channel " + bboc.getID() + " is already registered");
+					continue;
+				}
 
-					final boolean isActive = activeOutputChannels.contains(bboc.getID());
+				final boolean isActive = activeOutputChannels.contains(bboc.getID());
 
-					LOG.info("Registering byte buffered output channel " + bboc.getID() + " ("
+				LOG.info("Registering byte buffered output channel " + bboc.getID() + " ("
 						+ (isActive ? "active" : "inactive") + ")");
 
-					final OutputChannelContext outputChannelContext = new OutputChannelContext(outputGateContext, bboc,
+				final OutputChannelContext outputChannelContext = new OutputChannelContext(outputGateContext, bboc,
 						isActive);
-					this.registeredChannels.put(bboc.getID(), outputChannelContext);
-				}
+				this.registeredChannels.put(bboc.getID(), outputChannelContext);
 			}
+		}
 
-			for (int i = 0; i < environment.getNumberOfInputGates(); ++i) {
-				final InputGate<?> inputGate = environment.getInputGate(i);
-				final InputGateContext inputGateContext = new InputGateContext(taskContext);
-				for (int j = 0; j < inputGate.getNumberOfInputChannels(); ++j) {
-					final AbstractInputChannel<?> inputChannel = inputGate.getInputChannel(j);
-					if (!(inputChannel instanceof AbstractByteBufferedInputChannel)) {
-						LOG.error("Input channel " + inputChannel.getID() + "of job " + environment.getJobID()
+		for (int i = 0; i < environment.getNumberOfInputGates(); ++i) {
+			final InputGate<?> inputGate = environment.getInputGate(i);
+			final InputGateContext inputGateContext = new InputGateContext(taskContext);
+			for (int j = 0; j < inputGate.getNumberOfInputChannels(); ++j) {
+				final AbstractInputChannel<?> inputChannel = inputGate.getInputChannel(j);
+				if (!(inputChannel instanceof AbstractByteBufferedInputChannel)) {
+					LOG.error("Input channel " + inputChannel.getID() + "of job " + environment.getJobID()
 							+ " is not a byte buffered input channel, skipping...");
-						continue;
-					}
+					continue;
+				}
 
-					final AbstractByteBufferedInputChannel<?> bbic = (AbstractByteBufferedInputChannel<?>) inputChannel;
+				final AbstractByteBufferedInputChannel<?> bbic = (AbstractByteBufferedInputChannel<?>) inputChannel;
 
-					if (this.registeredChannels.containsKey(bbic.getID())) {
-						LOG.error("Byte buffered input channel " + bbic.getID() + " is already registered");
-						continue;
-					}
+				if (this.registeredChannels.containsKey(bbic.getID())) {
+					LOG.error("Byte buffered input channel " + bbic.getID() + " is already registered");
+					continue;
+				}
 
-					LOG.info("Registering byte buffered input channel " + bbic.getID());
+				LOG.info("Registering byte buffered input channel " + bbic.getID());
 
-					final InputChannelContext inputChannelContext = new InputChannelContext(inputGateContext, this,
+				final InputChannelContext inputChannelContext = new InputChannelContext(inputGateContext, this,
 						bbic);
-					this.registeredChannels.put(bbic.getID(), inputChannelContext);
-				}
+				this.registeredChannels.put(bbic.getID(), inputChannelContext);
 			}
 		}
 
@@ -194,22 +191,19 @@ public final class ByteBufferedChannelManager implements TransferEnvelopeDispatc
 	 */
 	public void unregister(final ExecutionVertexID vertexID, final Environment environment) {
 
-		synchronized (this.registeredChannels) {
-
-			for (int i = 0; i < environment.getNumberOfOutputGates(); ++i) {
-				final OutputGate<?> outputGate = environment.getOutputGate(i);
-				for (int j = 0; j < outputGate.getNumberOfOutputChannels(); ++j) {
-					final AbstractOutputChannel<?> outputChannel = outputGate.getOutputChannel(j);
-					this.registeredChannels.remove(outputChannel.getID());
-				}
+		for (int i = 0; i < environment.getNumberOfOutputGates(); ++i) {
+			final OutputGate<?> outputGate = environment.getOutputGate(i);
+			for (int j = 0; j < outputGate.getNumberOfOutputChannels(); ++j) {
+				final AbstractOutputChannel<?> outputChannel = outputGate.getOutputChannel(j);
+				this.registeredChannels.remove(outputChannel.getID());
 			}
+		}
 
-			for (int i = 0; i < environment.getNumberOfInputGates(); ++i) {
-				final InputGate<?> inputGate = environment.getInputGate(i);
-				for (int j = 0; j < inputGate.getNumberOfInputChannels(); ++j) {
-					final AbstractInputChannel<?> inputChannel = inputGate.getInputChannel(j);
-					this.registeredChannels.remove(inputChannel.getID());
-				}
+		for (int i = 0; i < environment.getNumberOfInputGates(); ++i) {
+			final InputGate<?> inputGate = environment.getInputGate(i);
+			for (int j = 0; j < inputGate.getNumberOfInputChannels(); ++j) {
+				final AbstractInputChannel<?> inputChannel = inputGate.getInputChannel(j);
+				this.registeredChannels.remove(inputChannel.getID());
 			}
 		}
 
@@ -236,26 +230,21 @@ public final class ByteBufferedChannelManager implements TransferEnvelopeDispatc
 
 	public void reportIOExceptionForAllInputChannels(IOException ioe) {
 
-		synchronized (this.registeredChannels) {
+		final Iterator<ChannelContext> it = this.registeredChannels.values().iterator();
 
-			final Iterator<ChannelContext> it = this.registeredChannels.values().iterator();
+		while (it.hasNext()) {
 
-			while (it.hasNext()) {
-
-				final ChannelContext channelContext = it.next();
-				if (channelContext.isInputChannel()) {
-					channelContext.reportIOException(ioe);
-				}
+			final ChannelContext channelContext = it.next();
+			if (channelContext.isInputChannel()) {
+				channelContext.reportIOException(ioe);
 			}
 		}
 	}
 
 	public void reportIOExceptionForOutputChannel(ChannelID sourceChannelID, IOException ioe) {
 
-		ChannelContext channelContext = null;
-		synchronized (this.registeredChannels) {
-			channelContext = this.registeredChannels.get(sourceChannelID);
-		}
+		final ChannelContext channelContext = this.registeredChannels.get(sourceChannelID);
+
 		if (channelContext == null) {
 			LOG.error("Cannot find network output channel with ID " + sourceChannelID);
 			return;
@@ -301,7 +290,7 @@ public final class ByteBufferedChannelManager implements TransferEnvelopeDispatc
 
 		// Handle the most common (unicast) case first
 		if (!freeSourceBuffer) {
-			
+
 			final List<ChannelID> localReceivers = receiverList.getLocalReceivers();
 			if (localReceivers.size() != 1) {
 				throw new IOException("Expected receiver list to have exactly one element");
@@ -309,21 +298,18 @@ public final class ByteBufferedChannelManager implements TransferEnvelopeDispatc
 
 			final ChannelID localReceiver = localReceivers.get(0);
 
-			synchronized (this.registeredChannels) {
-
-				final ChannelContext cc = this.registeredChannels.get(localReceiver);
-				if (cc == null) {
-					throw new IOException("Cannot find channel context for local receiver " + localReceiver);
-				}
+			final ChannelContext cc = this.registeredChannels.get(localReceiver);
+			if (cc == null) {
+				throw new IOException("Cannot find channel context for local receiver " + localReceiver);
+			}
 
-				if (!cc.isInputChannel()) {
-					throw new IOException("Local receiver " + localReceiver
+			if (!cc.isInputChannel()) {
+				throw new IOException("Local receiver " + localReceiver
 						+ " is not an input channel, but is supposed to accept a buffer");
-				}
-
-				cc.queueTransferEnvelope(transferEnvelope);
 			}
 
+			cc.queueTransferEnvelope(transferEnvelope);
+
 			return;
 		}
 
@@ -333,27 +319,26 @@ public final class ByteBufferedChannelManager implements TransferEnvelopeDispatc
 		if (receiverList.hasLocalReceivers()) {
 
 			final List<ChannelID> localReceivers = receiverList.getLocalReceivers();
-			synchronized (this.registeredChannels) {
-				for (final ChannelID localReceiver : localReceivers) {
 
-					final ChannelContext cc = this.registeredChannels.get(localReceiver);
-					if (cc == null) {
-						throw new IOException("Cannot find channel context for local receiver " + localReceiver);
-					}
+			for (final ChannelID localReceiver : localReceivers) {
 
-					if (!cc.isInputChannel()) {
-						throw new IOException("Local receiver " + localReceiver
-							+ " is not an input channel, but is supposed to accept a buffer");
-					}
+				final ChannelContext cc = this.registeredChannels.get(localReceiver);
+				if (cc == null) {
+					throw new IOException("Cannot find channel context for local receiver " + localReceiver);
+				}
 
-					final InputChannelContext inputChannelContext = (InputChannelContext) cc;
-					final Buffer destBuffer = inputChannelContext.requestEmptyBufferBlocking(srcBuffer.size());
-					srcBuffer.copyToBuffer(destBuffer);
-					// TODO: See if we can save one duplicate step here
-					final TransferEnvelope dup = transferEnvelope.duplicateWithoutBuffer();
-					dup.setBuffer(destBuffer);
-					inputChannelContext.queueTransferEnvelope(dup);
+				if (!cc.isInputChannel()) {
+					throw new IOException("Local receiver " + localReceiver
+							+ " is not an input channel, but is supposed to accept a buffer");
 				}
+
+				final InputChannelContext inputChannelContext = (InputChannelContext) cc;
+				final Buffer destBuffer = inputChannelContext.requestEmptyBufferBlocking(srcBuffer.size());
+				srcBuffer.copyToBuffer(destBuffer);
+				// TODO: See if we can save one duplicate step here
+				final TransferEnvelope dup = transferEnvelope.duplicateWithoutBuffer();
+				dup.setBuffer(destBuffer);
+				inputChannelContext.queueTransferEnvelope(dup);
 			}
 		}
 
@@ -382,16 +367,14 @@ public final class ByteBufferedChannelManager implements TransferEnvelopeDispatc
 		while (localIt.hasNext()) {
 
 			final ChannelID localReceiver = localIt.next();
-			synchronized (this.registeredChannels) {
 
-				final ChannelContext channelContext = this.registeredChannels.get(localReceiver);
-				if (channelContext == null) {
-					LOG.error("Cannot find local receiver " + localReceiver + " for job "
+			final ChannelContext channelContext = this.registeredChannels.get(localReceiver);
+			if (channelContext == null) {
+				LOG.error("Cannot find local receiver " + localReceiver + " for job "
 						+ transferEnvelope.getJobID());
-					continue;
-				}
-				channelContext.queueTransferEnvelope(transferEnvelope);
+				continue;
 			}
+			channelContext.queueTransferEnvelope(transferEnvelope);
 		}
 
 		final Iterator<InetSocketAddress> remoteIt = receiverList.getRemoteReceivers().iterator();
@@ -518,26 +501,23 @@ public final class ByteBufferedChannelManager implements TransferEnvelopeDispatc
 
 		this.networkConnectionManager.logBufferUtilization();
 
-		synchronized (this.registeredChannels) {
-
-			System.out.println("\tIncoming connections:");
+		System.out.println("\tIncoming connections:");
 
-			final Iterator<Map.Entry<ChannelID, ChannelContext>> it = this.registeredChannels.entrySet()
+		final Iterator<Map.Entry<ChannelID, ChannelContext>> it = this.registeredChannels.entrySet()
 				.iterator();
 
-			while (it.hasNext()) {
+		while (it.hasNext()) {
 
-				final Map.Entry<ChannelID, ChannelContext> entry = it.next();
-				final ChannelContext context = entry.getValue();
-				if (context.isInputChannel()) {
+			final Map.Entry<ChannelID, ChannelContext> entry = it.next();
+			final ChannelContext context = entry.getValue();
+			if (context.isInputChannel()) {
 
-					final InputChannelContext inputChannelContext = (InputChannelContext) context;
-					final int numberOfQueuedEnvelopes = inputChannelContext.getNumberOfQueuedEnvelopes();
-					final int numberOfQueuedMemoryBuffers = inputChannelContext.getNumberOfQueuedMemoryBuffers();
+				final InputChannelContext inputChannelContext = (InputChannelContext) context;
+				final int numberOfQueuedEnvelopes = inputChannelContext.getNumberOfQueuedEnvelopes();
+				final int numberOfQueuedMemoryBuffers = inputChannelContext.getNumberOfQueuedMemoryBuffers();
 
-					System.out.println("\t\t" + entry.getKey() + ": " + numberOfQueuedMemoryBuffers + " ("
+				System.out.println("\t\t" + entry.getKey() + ": " + numberOfQueuedMemoryBuffers + " ("
 						+ numberOfQueuedEnvelopes + ")");
-				}
 			}
 		}
 	}
@@ -582,23 +562,21 @@ public final class ByteBufferedChannelManager implements TransferEnvelopeDispatc
 			final List<ChannelID> localReceivers = receiverList.getLocalReceivers();
 			if (localReceivers.size() == 1) {
 				// Unicast case, get final buffer provider
-				synchronized (this.registeredChannels) {
 
-					final ChannelID localReceiver = localReceivers.get(0);
-					final ChannelContext cc = this.registeredChannels.get(localReceiver);
-					if (cc == null) {
-						throw new IOException("Cannot find channel context for local receiver " + localReceiver);
-					}
+				final ChannelID localReceiver = localReceivers.get(0);
+				final ChannelContext cc = this.registeredChannels.get(localReceiver);
+				if (cc == null) {
+					throw new IOException("Cannot find channel context for local receiver " + localReceiver);
+				}
 
-					if (!cc.isInputChannel()) {
-						throw new IOException("Channel context for local receiver " + localReceiver
+				if (!cc.isInputChannel()) {
+					throw new IOException("Channel context for local receiver " + localReceiver
 							+ " is not an input channel context");
-					}
+				}
 
-					final InputChannelContext icc = (InputChannelContext) cc;
+				final InputChannelContext icc = (InputChannelContext) cc;
 
-					return icc;
-				}
+				return icc;
 			}
 		}
 

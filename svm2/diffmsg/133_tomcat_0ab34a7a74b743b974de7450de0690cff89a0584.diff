commit 0ab34a7a74b743b974de7450de0690cff89a0584
Author: Konstantin Kolinko <kkolinko@apache.org>
Date:   Wed Mar 5 14:37:38 2014 +0000

    When reporting threads that are still running while web application is being stopped, print their stack traces to the log.
    
    Minor fixes:
    Remember result of Thread.getName() as that method is not trivial.
    Strip trailing whitespaces from changelog.
    
    git-svn-id: https://svn.apache.org/repos/asf/tomcat/trunk@1574508 13f79535-47bb-0310-9956-ffa450edef68

diff --git a/java/org/apache/catalina/loader/LocalStrings.properties b/java/org/apache/catalina/loader/LocalStrings.properties
index d586fbe..0e3b03d 100644
--- a/java/org/apache/catalina/loader/LocalStrings.properties
+++ b/java/org/apache/catalina/loader/LocalStrings.properties
@@ -39,6 +39,8 @@ webappClassLoader.jarsModified=One or more JARs have been modified in the web ap
 webappClassLoader.jarsRemoved=One or more JARs have been removed from the web application [{0}]
 webappClassLoader.javaseClassLoaderNull=The j2seClassLoader attribute may not be null
 webappClassLoader.resourceModified=Resource [{0}] has been modified. The last modified time was [{1}] and is now [{2}]
+webappClassLoader.stackTrace=Stack trace of thread "{0}":{1}
+webappClassLoader.stackTraceRequestThread=Stack trace of request processing thread "{0}":{1}
 webappClassLoader.stopThreadFail=Failed to terminate thread named [{0}] for web application [{1}]
 webappClassLoader.stopTimerThreadFail=Failed to terminate TimerThread named [{0}] for web application [{1}]
 webappClassLoader.validationErrorJarPath=Unable to validate JAR entry with name {0}
diff --git a/java/org/apache/catalina/loader/WebappClassLoader.java b/java/org/apache/catalina/loader/WebappClassLoader.java
index ce50ac3..31fdc19 100644
--- a/java/org/apache/catalina/loader/WebappClassLoader.java
+++ b/java/org/apache/catalina/loader/WebappClassLoader.java
@@ -1772,6 +1772,8 @@ public class WebappClassLoader extends URLClassLoader
                         continue;
                     }
 
+                    final String threadName = thread.getName();
+
                     // JVM controlled threads
                     ThreadGroup tg = thread.getThreadGroup();
                     if (tg != null &&
@@ -1779,7 +1781,7 @@ public class WebappClassLoader extends URLClassLoader
 
                         // HttpClient keep-alive threads
                         if (clearReferencesHttpClientKeepAliveThread &&
-                                thread.getName().equals("Keep-Alive-Timer")) {
+                                threadName.equals("Keep-Alive-Timer")) {
                             thread.setContextClassLoader(parent);
                             log.debug(sm.getString(
                                     "webappClassLoader.checkThreadsHttpClient"));
@@ -1805,10 +1807,14 @@ public class WebappClassLoader extends URLClassLoader
 
                     if (isRequestThread(thread)) {
                         log.error(sm.getString("webappClassLoader.warnRequestThread",
-                                getContextName(), thread.getName()));
+                                getContextName(), threadName));
+                        log.error(sm.getString("webappClassLoader.stackTraceRequestThread",
+                                threadName, getStackTrace(thread)));
                     } else {
                         log.error(sm.getString("webappClassLoader.warnThread",
-                                getContextName(), thread.getName()));
+                                getContextName(), threadName));
+                        log.error(sm.getString("webappClassLoader.stackTrace",
+                                threadName, getStackTrace(thread)));
                     }
 
                     // Don't try an stop the threads unless explicitly
@@ -2125,6 +2131,14 @@ public class WebappClassLoader extends URLClassLoader
         return name;
     }
 
+    private String getStackTrace(Thread thread) {
+        StringBuilder builder = new StringBuilder();
+        for (StackTraceElement ste : thread.getStackTrace()) {
+            builder.append("\n ").append(ste);
+        }
+        return builder.toString();
+    }
+
     /**
      * @param o object to test, may be null
      * @return <code>true</code> if o has been loaded by the current classloader
diff --git a/webapps/docs/changelog.xml b/webapps/docs/changelog.xml
index ce63365..d3a89ed 100644
--- a/webapps/docs/changelog.xml
+++ b/webapps/docs/changelog.xml
@@ -79,8 +79,13 @@
         invalid request for a resource outside of the web application. (markt)
       </fix>
       <fix>
-        Remove an unnecessary null check identified by FindBugs. (markt) 
+        Remove an unnecessary null check identified by FindBugs. (markt)
       </fix>
+      <add>
+        In WebappClassLoader, when reporting threads that are still running
+        while web application is being stopped, print their stack traces to
+        the log. (kkolinko)
+      </add>
     </changelog>
   </subsection>
   <subsection name="Coyote">
@@ -112,7 +117,7 @@
         (markt)
       </fix>
       <fix>
-        Remove an unnecessary null check identified by FindBugs. (markt) 
+        Remove an unnecessary null check identified by FindBugs. (markt)
       </fix>
     </changelog>
   </subsection>

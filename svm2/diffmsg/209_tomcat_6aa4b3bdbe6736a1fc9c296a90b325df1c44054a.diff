commit 6aa4b3bdbe6736a1fc9c296a90b325df1c44054a
Author: Mark Emlyn David Thomas <markt@apache.org>
Date:   Tue Oct 8 10:16:38 2013 +0000

    Fix an intermittent failure with TestWebappClassLoaderExecutorMemoryLeak.
    If the executor threads did not stop quickly enough, Thread.stop() was used. Sometimes this resulted in the executor not shutting down and the test failing. This makes using clearReferencesStopThreads marginally safer.
    
    git-svn-id: https://svn.apache.org/repos/asf/tomcat/trunk@1530213 13f79535-47bb-0310-9956-ffa450edef68

diff --git a/java/org/apache/catalina/loader/WebappClassLoader.java b/java/org/apache/catalina/loader/WebappClassLoader.java
index dfe79ef..0d5c089 100644
--- a/java/org/apache/catalina/loader/WebappClassLoader.java
+++ b/java/org/apache/catalina/loader/WebappClassLoader.java
@@ -2079,6 +2079,7 @@ public class WebappClassLoader extends URLClassLoader
     @SuppressWarnings("deprecation") // thread.stop()
     private void clearReferencesThreads() {
         Thread[] threads = getThreads();
+        List<Thread> executorThreadsToStop = new ArrayList<>();
 
         // Iterate over the set of threads
         for (Thread thread : threads) {
@@ -2137,6 +2138,7 @@ public class WebappClassLoader extends URLClassLoader
 
                     // If the thread has been started via an executor, try
                     // shutting down the executor
+                    boolean usingExecutor = false;
                     try {
 
                         // Runnable wrapped by Thread
@@ -2169,6 +2171,7 @@ public class WebappClassLoader extends URLClassLoader
                             Object executor = executorField.get(target);
                             if (executor instanceof ThreadPoolExecutor) {
                                 ((ThreadPoolExecutor) executor).shutdownNow();
+                                usingExecutor = true;
                             }
                         }
                     } catch (SecurityException e) {
@@ -2189,12 +2192,44 @@ public class WebappClassLoader extends URLClassLoader
                                 thread.getName(), getContextName()), e);
                     }
 
-                    // This method is deprecated and for good reason. This is
-                    // very risky code but is the only option at this point.
-                    // A *very* good reason for apps to do this clean-up
-                    // themselves.
-                    thread.stop();
+                    if (usingExecutor) {
+                        // Executor may take a short time to stop all the
+                        // threads. Make a note of threads that should be
+                        // stopped and check them at the end of the method.
+                        executorThreadsToStop.add(thread);
+                    } else {
+                        // This method is deprecated and for good reason. This
+                        // is very risky code but is the only option at this
+                        // point. A *very* good reason for apps to do this
+                        // clean-up themselves.
+                        thread.stop();
+                    }
+                }
+            }
+        }
+
+        // If thread stopping is enabled, executor threads should have been
+        // stopped above when the executor was shut down but that depends on the
+        // thread correctly handling the interrupt. Give all the executor
+        // threads a few seconds shutdown and if they are still running
+        // Give threads up to 2 seconds to shutdown
+        int count = 0;
+        for (Thread t : executorThreadsToStop) {
+            while (t.isAlive() && count < 100) {
+                try {
+                    Thread.sleep(20);
+                } catch (InterruptedException e) {
+                    // Quit the while loop
+                    break;
                 }
+                count++;
+            }
+            if (t.isAlive()) {
+                // This method is deprecated and for good reason. This is
+                // very risky code but is the only option at this point.
+                // A *very* good reason for apps to do this clean-up
+                // themselves.
+                t.stop();
             }
         }
     }
diff --git a/webapps/docs/config/context.xml b/webapps/docs/config/context.xml
index 25ebd24..db15db3 100644
--- a/webapps/docs/config/context.xml
+++ b/webapps/docs/config/context.xml
@@ -667,7 +667,10 @@
         is likely to result in instability. As such, enabling this should be
         viewed as an option of last resort in a development environment and is
         not recommended in a production environment. If not specified, the
-        default value of <code>false</code> will be used.</p>
+        default value of <code>false</code> will be used. If this feature is
+        enabled, web applications may take up to two seconds longer to stop as
+        executor threads are given up to two seconds to stop gracefully before
+        <code>Thread.stop()</code> is called on any remaining threads.</p>
       </attribute>
 
       <attribute name="clearReferencesStopTimerThreads" required = "false">

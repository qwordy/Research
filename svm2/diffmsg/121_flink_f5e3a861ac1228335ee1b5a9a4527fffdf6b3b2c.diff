commit f5e3a861ac1228335ee1b5a9a4527fffdf6b3b2c
Author: StephanEwen <stephan.ewen@tu-berlin.de>
Date:   Wed May 21 14:26:29 2014 +0200

    Remove wait flag from CLI client. Wait is now the default.

diff --git a/stratosphere-clients/src/main/java/eu/stratosphere/client/CliFrontend.java b/stratosphere-clients/src/main/java/eu/stratosphere/client/CliFrontend.java
index 323903f..119bd04 100644
--- a/stratosphere-clients/src/main/java/eu/stratosphere/client/CliFrontend.java
+++ b/stratosphere-clients/src/main/java/eu/stratosphere/client/CliFrontend.java
@@ -75,9 +75,6 @@ public class CliFrontend {
 	private static final Option PARALLELISM_OPTION = new Option("p", "parallelism", true, "The parallelism with which to run the program.");
 	private static final Option ARGS_OPTION = new Option("a", "arguments", true, "Program arguments. Arguments can also be added without -a, simply as trailing parameters.");
 	
-	// run specific options
-	private static final Option WAIT_OPTION = new Option("w", "wait", false, "Wait for program to finish");
-	
 	// info specific options
 	private static final Option DESCR_OPTION = new Option("d", "description", false, "Show description of expected program arguments");
 	private static final Option PLAN_OPTION = new Option("e", "executionplan", false, "Show optimized execution plan of the program (JSON)");
@@ -145,8 +142,6 @@ public class CliFrontend {
 		ARGS_OPTION.setArgName("programArgs");
 		ARGS_OPTION.setArgs(Option.UNLIMITED_VALUES);
 		
-		WAIT_OPTION.setRequired(false);
-		
 		PLAN_OPTION.setRequired(false);
 		DESCR_OPTION.setRequired(false);
 		
@@ -180,9 +175,7 @@ public class CliFrontend {
 	 * @return Command line options for the run action.
 	 */
 	private static Options getRunOptions(Options options) {
-		options = getProgramSpecificOptions(options);
-		options.addOption(WAIT_OPTION);
-		return options;
+		return getProgramSpecificOptions(options);
 	}
 	
 	/**
@@ -310,7 +303,6 @@ public class CliFrontend {
 		
 		// -------- build the client -------------
 		Client client;
-		String webFrontendAddress;
 		{
 			Configuration configuration = getConfiguration();
 			
@@ -328,9 +320,6 @@ public class CliFrontend {
 					printHelpForRun();
 					return 1;
 				}
-				
-				// cannot say something about remote web frontends
-				webFrontendAddress = null;
 			}
 			else {
 				// second, search for a .yarn-jobmanager file
@@ -353,9 +342,6 @@ public class CliFrontend {
 						printHelpForRun();
 						return 1;
 					}
-					
-					// cannot say something about remote web frontends
-					webFrontendAddress = null;
 				}
 				else {
 					// regular config file gives the address
@@ -374,19 +360,13 @@ public class CliFrontend {
 						printHelpForRun();
 						return 1;
 					}
-					
-					// configure the webFrontendAddress
-					webFrontendAddress = jobManagerAddress + ':' + 
-								configuration.getInteger(ConfigConstants.JOB_MANAGER_WEB_PORT_KEY, ConfigConstants.DEFAULT_JOB_MANAGER_WEB_FRONTEND_PORT);
 				}
 			}
 			
 			client = new Client(configuration);
-			client.setPrintStatusDuringExecution(true);
 		}
 
 		// --------------- other flags and parameters ---------------------
-		boolean wait = line.hasOption(WAIT_OPTION.getOpt());
 		
 		int parallelism = -1;
 		if (line.hasOption(PARALLELISM_OPTION.getOpt())) {
@@ -406,15 +386,16 @@ public class CliFrontend {
 			}
 		}
 		
-		return executeProgram(program, client, parallelism, wait, webFrontendAddress);
+		return executeProgram(program, client, parallelism);
 	}
 	
 	// --------------------------------------------------------------------------------------------
 	
-	protected int executeProgram(PackagedProgram program, Client client, int parallelism, boolean wait, String webFrontendAddress) {
+	protected int executeProgram(PackagedProgram program, Client client, int parallelism) {
 		JobExecutionResult execResult;
 		try {
-			execResult = client.run(program, parallelism, wait);
+			client.setPrintStatusDuringExecution(true);
+			execResult = client.run(program, parallelism, true);
 		}
 		catch (ProgramInvocationException e) {
 			return handleError(e);
@@ -423,26 +404,16 @@ public class CliFrontend {
 			program.deleteExtractedLibraries();
 		}
 		
-		if (wait) {
-			// we come here after the job has finished
-			if (execResult != null) {
-				System.out.println("Job Runtime: " + execResult.getNetRuntime());
-				Map<String, Object> accumulatorsResult = execResult.getAllAccumulatorResults();
-				if (accumulatorsResult.size() > 0) {
-					System.out.println("Accumulator Results: ");
-					System.out.println(AccumulatorHelper.getResultsFormated(accumulatorsResult));
-				}
+		// we come here after the job has finished
+		if (execResult != null) {
+			System.out.println("Job Runtime: " + execResult.getNetRuntime());
+			Map<String, Object> accumulatorsResult = execResult.getAllAccumulatorResults();
+			if (accumulatorsResult.size() > 0) {
+				System.out.println("Accumulator Results: ");
+				System.out.println(AccumulatorHelper.getResultsFormated(accumulatorsResult));
 			}
-			return 0;
-		}
-		else {
-			// we are not waiting. we come here immediately after the job is submitted
-			System.out.println("Job successfully submitted. Use -w (or --wait) option to track the progress here.");
-			if (webFrontendAddress != null) {
-				System.out.println("JobManager web interface: http://" + webFrontendAddress);
-			}
-			return 0;
 		}
+		return 0;
 	}
 	
 	// --------------------------------------------------------------------------------------------
diff --git a/stratosphere-clients/src/main/java/eu/stratosphere/client/RemoteExecutor.java b/stratosphere-clients/src/main/java/eu/stratosphere/client/RemoteExecutor.java
index dcf6fd5..849756a 100644
--- a/stratosphere-clients/src/main/java/eu/stratosphere/client/RemoteExecutor.java
+++ b/stratosphere-clients/src/main/java/eu/stratosphere/client/RemoteExecutor.java
@@ -78,22 +78,22 @@ public class RemoteExecutor extends PlanExecutor {
 	@Override
 	public JobExecutionResult executePlan(Plan plan) throws Exception {
 		JobWithJars p = new JobWithJars(plan, this.jarFiles);
-		return this.client.run(p, true);
+		return this.client.run(p, -1, true);
 	}
 	
 	public JobExecutionResult executePlanWithJars(JobWithJars p) throws Exception {
-		return this.client.run(p, true);
+		return this.client.run(p, -1, true);
 	}
 
 	public JobExecutionResult executeJar(String jarPath, String assemblerClass, String[] args) throws Exception {
 		File jarFile = new File(jarPath);
 		PackagedProgram program = new PackagedProgram(jarFile, assemblerClass, args);
-		return this.client.run(program.getPlanWithJars(), true);
+		return this.client.run(program.getPlanWithJars(), -1, true);
 	}
 
 	@Override
 	public String getOptimizerPlanAsJSON(Plan plan) throws Exception {
-		OptimizedPlan op = client.getOptimizedPlan(new JobWithJars(plan, this.jarFiles));
+		OptimizedPlan op = client.getOptimizedPlan(new JobWithJars(plan, this.jarFiles), -1);
 		PlanJSONDumpGenerator jsonGen = new PlanJSONDumpGenerator();
 		return jsonGen.getOptimizerPlanAsJSON(op);
 	}
diff --git a/stratosphere-clients/src/main/java/eu/stratosphere/client/program/Client.java b/stratosphere-clients/src/main/java/eu/stratosphere/client/program/Client.java
index 4779eee..143bb8c 100644
--- a/stratosphere-clients/src/main/java/eu/stratosphere/client/program/Client.java
+++ b/stratosphere-clients/src/main/java/eu/stratosphere/client/program/Client.java
@@ -18,6 +18,9 @@ import java.io.IOException;
 import java.net.InetSocketAddress;
 import java.util.List;
 
+import org.apache.commons.logging.Log;
+import org.apache.commons.logging.LogFactory;
+
 import eu.stratosphere.api.common.JobExecutionResult;
 import eu.stratosphere.api.common.Plan;
 import eu.stratosphere.api.java.ExecutionEnvironment;
@@ -44,6 +47,9 @@ import eu.stratosphere.nephele.jobgraph.JobGraph;
  */
 public class Client {
 	
+	private static final Log LOG = LogFactory.getLog(Client.class);
+	
+	
 	private final Configuration configuration;	// the configuration describing the job manager address
 	
 	private final PactCompiler compiler;		// the compiler to compile the jobs
@@ -121,7 +127,7 @@ public class Client {
 	
 	public OptimizedPlan getOptimizedPlan(PackagedProgram prog, int parallelism) throws CompilerException, ProgramInvocationException {
 		if (prog.isUsingProgramEntryPoint()) {
-			return getOptimizedPlan(prog.getPlanWithJars());
+			return getOptimizedPlan(prog.getPlanWithJars(), parallelism);
 		}
 		else if (prog.isUsingInteractiveMode()) {
 			// temporary hack to support the optimizer plan preview
@@ -142,7 +148,11 @@ public class Client {
 		}
 	}
 	
-	public OptimizedPlan getOptimizedPlan(Plan p) throws CompilerException {
+	public OptimizedPlan getOptimizedPlan(Plan p, int parallelism) throws CompilerException {
+		if (parallelism > 0 && p.getDefaultParallelism() <= 0) {
+			p.setDefaultParallelism(parallelism);
+		}
+		
 		ContextChecker checker = new ContextChecker();
 		checker.check(p);
 		return this.compiler.compile(p);
@@ -157,8 +167,8 @@ public class Client {
 	 * @throws CompilerException Thrown, if the compiler encounters an illegal situation.
 	 * @throws ProgramInvocationException Thrown, if the program could not be instantiated from its jar file.
 	 */
-	public OptimizedPlan getOptimizedPlan(JobWithJars prog) throws CompilerException, ProgramInvocationException {
-		return getOptimizedPlan(prog.getPlan());
+	public OptimizedPlan getOptimizedPlan(JobWithJars prog, int parallelism) throws CompilerException, ProgramInvocationException {
+		return getOptimizedPlan(prog.getPlan(), parallelism);
 	}
 	
 	public JobGraph getJobGraph(PackagedProgram prog, OptimizedPlan optPlan) throws ProgramInvocationException {
@@ -176,9 +186,9 @@ public class Client {
 		return job;
 	}
 	
-	public JobExecutionResult run(PackagedProgram prog, int parallelism, boolean wait) throws ProgramInvocationException {
+	public JobExecutionResult run(final PackagedProgram prog, int parallelism, boolean wait) throws ProgramInvocationException {
 		if (prog.isUsingProgramEntryPoint()) {
-			return run(prog.getPlanWithJars(), wait);
+			return run(prog.getPlanWithJars(), parallelism, wait);
 		}
 		else if (prog.isUsingInteractiveMode()) {
 			ContextEnvironment env = new ContextEnvironment(this, prog.getAllLibraries(), prog.getUserCodeClassLoader());
@@ -186,9 +196,26 @@ public class Client {
 			if (parallelism > 0) {
 				env.setDegreeOfParallelism(parallelism);
 			}
-			
 			env.setAsContext();
-			prog.invokeInteractiveModeForExecution();
+			
+			if (wait) {
+				// invoke here
+				prog.invokeInteractiveModeForExecution();
+			}
+			else {
+				// invoke in the background
+				Thread backGroundRunner = new Thread("Program Runner") {
+					public void run() {
+						try {
+							prog.invokeInteractiveModeForExecution();
+						}
+						catch (Throwable t) {
+							LOG.error("The program execution failed.", t);
+						}
+					};
+				};
+				backGroundRunner.start();
+			}
 			return null;
 		}
 		else {
@@ -214,8 +241,8 @@ public class Client {
 	 *                                    on the nephele system failed.
 	 * @throws JobInstantiationException Thrown, if the plan assembler function causes an exception.
 	 */
-	public JobExecutionResult run(JobWithJars prog, boolean wait) throws CompilerException, ProgramInvocationException {
-		return run(getOptimizedPlan(prog), prog.getJarFiles(), wait);
+	public JobExecutionResult run(JobWithJars prog, int parallelism, boolean wait) throws CompilerException, ProgramInvocationException {
+		return run(getOptimizedPlan(prog, parallelism), prog.getJarFiles(), wait);
 	}
 	
 
diff --git a/stratosphere-clients/src/main/java/eu/stratosphere/client/program/ContextEnvironment.java b/stratosphere-clients/src/main/java/eu/stratosphere/client/program/ContextEnvironment.java
index 39bdd35..2088baa 100644
--- a/stratosphere-clients/src/main/java/eu/stratosphere/client/program/ContextEnvironment.java
+++ b/stratosphere-clients/src/main/java/eu/stratosphere/client/program/ContextEnvironment.java
@@ -45,18 +45,16 @@ public class ContextEnvironment extends ExecutionEnvironment {
 	@Override
 	public JobExecutionResult execute(String jobName) throws Exception {
 		Plan p = createProgramPlan(jobName);
-		p.setDefaultParallelism(getDegreeOfParallelism());
-		
 		JobWithJars toRun = new JobWithJars(p, this.jarFilesToAttach, this.userCodeClassLoader);
-		return this.client.run(toRun, true);
+		
+		return this.client.run(toRun, getDegreeOfParallelism(), true);
 	}
 
 	@Override
 	public String getExecutionPlan() throws Exception {
 		Plan p = createProgramPlan("unnamed job");
-		p.setDefaultParallelism(getDegreeOfParallelism());
 		
-		OptimizedPlan op = this.client.getOptimizedPlan(p);
+		OptimizedPlan op = this.client.getOptimizedPlan(p, getDegreeOfParallelism());
 		
 		PlanJSONDumpGenerator gen = new PlanJSONDumpGenerator();
 		return gen.getOptimizerPlanAsJSON(op);
diff --git a/stratosphere-clients/src/test/java/eu/stratosphere/client/CliFrontendInvalidConfigTest.java b/stratosphere-clients/src/test/java/eu/stratosphere/client/CliFrontendInvalidConfigTest.java
index aea9dbf..a7bcd9e 100644
--- a/stratosphere-clients/src/test/java/eu/stratosphere/client/CliFrontendInvalidConfigTest.java
+++ b/stratosphere-clients/src/test/java/eu/stratosphere/client/CliFrontendInvalidConfigTest.java
@@ -40,7 +40,7 @@ public class CliFrontendInvalidConfigTest {
 		try {
 			// test run with invalid config
 			{
-				String[] parameters = {"-w", "-v", "-j", CliFrontendTest.getTestJarPath(), "-a", "some", "program", "arguments"};
+				String[] parameters = {"-v", "-j", CliFrontendTest.getTestJarPath(), "-a", "some", "program", "arguments"};
 				TestingCliFrontend testFrontend = new TestingCliFrontend(CliFrontendTest.getInvalidConfigDir());
 				assertTrue(0 != testFrontend.run(parameters));
 			}
diff --git a/stratosphere-clients/src/test/java/eu/stratosphere/client/CliFrontendInvalidYarnFileTest.java b/stratosphere-clients/src/test/java/eu/stratosphere/client/CliFrontendInvalidYarnFileTest.java
index 33efc4a..4aefb15 100644
--- a/stratosphere-clients/src/test/java/eu/stratosphere/client/CliFrontendInvalidYarnFileTest.java
+++ b/stratosphere-clients/src/test/java/eu/stratosphere/client/CliFrontendInvalidYarnFileTest.java
@@ -40,7 +40,7 @@ public class CliFrontendInvalidYarnFileTest {
 		try {
 			// test run with invalid config
 			{
-				String[] parameters = {"-w", "-v", "-j", CliFrontendTest.getTestJarPath(), "-a", "some", "program", "arguments"};
+				String[] parameters = {"-v", "-j", CliFrontendTest.getTestJarPath(), "-a", "some", "program", "arguments"};
 				TestingCliFrontend testFrontend = new TestingCliFrontend(CliFrontendTest.getConfigDirWithInvalidYarnFile());
 				assertTrue(0 != testFrontend.run(parameters));
 			}
diff --git a/stratosphere-clients/src/test/java/eu/stratosphere/client/CliFrontendTest.java b/stratosphere-clients/src/test/java/eu/stratosphere/client/CliFrontendTest.java
index 28d8d5e..cc5e8f3 100644
--- a/stratosphere-clients/src/test/java/eu/stratosphere/client/CliFrontendTest.java
+++ b/stratosphere-clients/src/test/java/eu/stratosphere/client/CliFrontendTest.java
@@ -27,7 +27,6 @@ import org.junit.Test;
 
 import eu.stratosphere.client.program.Client;
 import eu.stratosphere.client.program.PackagedProgram;
-import eu.stratosphere.configuration.ConfigConstants;
 import eu.stratosphere.configuration.GlobalConfiguration;
 
 
@@ -39,8 +38,6 @@ public class CliFrontendTest {
 	
 	private static final int TEST_JOB_MANAGER_PORT = 55443;
 	
-	private static final String TEST_WEBFRONTEND_ADDRESS = "192.168.1.33:" + ConfigConstants.DEFAULT_JOB_MANAGER_WEB_FRONTEND_PORT;
-	
 	
 	@BeforeClass
 	public static void init() {
@@ -54,7 +51,7 @@ public class CliFrontendTest {
 		try {
 			// test unrecognized option
 			{
-				String[] parameters = {"-w", "-v", "-l", "-a", "some", "program", "arguments"};
+				String[] parameters = {"-v", "-l", "-a", "some", "program", "arguments"};
 				TestingCliFrontend testFrontend = new TestingCliFrontend();
 				int retCode = testFrontend.run(parameters);
 				assertTrue(retCode == 2);
@@ -78,38 +75,33 @@ public class CliFrontendTest {
 			
 			// test variant with explicit jar and arguments option
 			{
-				String[] parameters = {"-w", "-v", "-j", getTestJarPath(), "-a", "some", "program", "arguments"};
+				String[] parameters = {"-v", "-j", getTestJarPath(), "-a", "some", "program", "arguments"};
 				
 				TestingCliFrontend testFrontend = new TestingCliFrontend();
 				testFrontend.expectedArguments = new String[] {"some", "program", "arguments"};
 				testFrontend.expectedMainClass = TEST_JAR_MAIN_CLASS;
-				testFrontend.expectedWait = true;
-				testFrontend.expectedWebFrontend = TEST_WEBFRONTEND_ADDRESS;
 				
 				assertEquals(0, testFrontend.run(parameters));
 			}
 			
 			// test valid variant with explicit jar and no arguments option
 			{
-				String[] parameters = {"-w", "-v", "-j", getTestJarPath(), "some", "program", "arguments"};
+				String[] parameters = {"-v", "-j", getTestJarPath(), "some", "program", "arguments"};
 				
 				TestingCliFrontend testFrontend = new TestingCliFrontend();
 				testFrontend.expectedArguments = new String[] {"some", "program", "arguments"};
 				testFrontend.expectedMainClass = TEST_JAR_MAIN_CLASS;
-				testFrontend.expectedWait = true;
 				
 				assertEquals(0, testFrontend.run(parameters));
 			}
 			
 			// test valid variant with no jar and no arguments option
 			{
-				String[] parameters = {"-w", "-v", getTestJarPath(), "some", "program", "arguments"};
+				String[] parameters = {"-v", getTestJarPath(), "some", "program", "arguments"};
 				
 				TestingCliFrontend testFrontend = new TestingCliFrontend();
 				testFrontend.expectedArguments = new String[] {"some", "program", "arguments"};
 				testFrontend.expectedMainClass = TEST_JAR_MAIN_CLASS;
-				testFrontend.expectedWait = true;
-				testFrontend.expectedWebFrontend = TEST_WEBFRONTEND_ADDRESS;
 				
 				assertEquals(0, testFrontend.run(parameters));
 			}
@@ -124,14 +116,14 @@ public class CliFrontendTest {
 			
 			// test non existing file without arguments
 			{
-				String[] parameters = {"-w", "-v", "/some/none/existing/path", "some", "program", "arguments"};
+				String[] parameters = {"-v", "/some/none/existing/path", "some", "program", "arguments"};
 				TestingCliFrontend testFrontend = new TestingCliFrontend();
 				assertTrue(0 != testFrontend.run(parameters));
 			}
 
 			// test non existing file without arguments
 			{
-				String[] parameters = {"-w", "-v", "/some/none/existing/path", "some", "program", "arguments"};
+				String[] parameters = {"-v", "/some/none/existing/path", "some", "program", "arguments"};
 				TestingCliFrontend testFrontend = new TestingCliFrontend();
 				assertTrue(0 != testFrontend.run(parameters));
 			}
@@ -143,7 +135,6 @@ public class CliFrontendTest {
 				TestingCliFrontend testFrontend = new TestingCliFrontend();
 				testFrontend.expectedArguments = new String[0];
 				testFrontend.expectedMainClass = TEST_JAR_MAIN_CLASS;
-				testFrontend.expectedWait = false;
 				testFrontend.expectedDop = 42;
 				
 				assertEquals(0, testFrontend.run(parameters));
@@ -273,10 +264,6 @@ public class CliFrontendTest {
 		
 		public int expectedDop;
 		
-		public String expectedWebFrontend;
-		
-		public boolean expectedWait;
-		
 		
 		public TestingCliFrontend() {
 			this(getConfigDir());
@@ -287,7 +274,7 @@ public class CliFrontendTest {
 		}
 		
 		@Override
-		protected int executeProgram(PackagedProgram program, Client client, int parallelism, boolean wait, String webFrontendAddress) {
+		protected int executeProgram(PackagedProgram program, Client client, int parallelism) {
 			if (expectedJobManagerAddress != null) {
 				assertEquals(expectedJobManagerAddress, client.getJobManagerAddress());
 			} else {
@@ -309,10 +296,6 @@ public class CliFrontendTest {
 			if (expectedDop > 0) {
 				assertEquals(expectedDop, parallelism);
 			}
-			if (expectedWebFrontend != null) {
-				assertEquals(expectedWebFrontend, webFrontendAddress);
-			}
-			assertEquals(expectedWait, wait);
 			
 			return 0;
 		}
diff --git a/stratosphere-clients/src/test/java/eu/stratosphere/client/CliFrontendYarnFileTest.java b/stratosphere-clients/src/test/java/eu/stratosphere/client/CliFrontendYarnFileTest.java
index ed29c25..d5bb879 100644
--- a/stratosphere-clients/src/test/java/eu/stratosphere/client/CliFrontendYarnFileTest.java
+++ b/stratosphere-clients/src/test/java/eu/stratosphere/client/CliFrontendYarnFileTest.java
@@ -43,11 +43,10 @@ public class CliFrontendYarnFileTest {
 		try {
 			// test with yarn JM file
 			{
-				String[] parameters = {"-w", "-v", CliFrontendTest.getTestJarPath(), "some", "program", "arguments"};
+				String[] parameters = {"-v", CliFrontendTest.getTestJarPath(), "some", "program", "arguments"};
 				
 				TestingCliFrontend testFrontend = new TestingCliFrontend(CliFrontendTest.getConfigDirWithYarnFile());
 				testFrontend.expectedArguments = new String[] {"some", "program", "arguments"};
-				testFrontend.expectedWait = true;
 				testFrontend.expectedJobManagerAddress = TEST_YARN_JOB_MANAGER_ADDRESS;
 				testFrontend.expectedJobManagerPort = TEST_YARN_JOB_MANAGER_PORT;
 				
@@ -68,11 +67,10 @@ public class CliFrontendYarnFileTest {
 		try {
 			// test with yarn JM file
 			{
-				String[] parameters = {"-w", "-v", "-m", "10.221.130.22:7788", CliFrontendTest.getTestJarPath(), "some", "program", "arguments"};
+				String[] parameters = {"-v", "-m", "10.221.130.22:7788", CliFrontendTest.getTestJarPath(), "some", "program", "arguments"};
 				
 				TestingCliFrontend testFrontend = new TestingCliFrontend(CliFrontendTest.getConfigDirWithYarnFile());
 				testFrontend.expectedArguments = new String[] {"some", "program", "arguments"};
-				testFrontend.expectedWait = true;
 				testFrontend.expectedJobManagerAddress = "10.221.130.22";
 				testFrontend.expectedJobManagerPort = 7788;
 				
diff --git a/stratosphere-clients/src/test/java/eu/stratosphere/client/program/ClientTest.java b/stratosphere-clients/src/test/java/eu/stratosphere/client/program/ClientTest.java
index 479d59a..244ec4a 100644
--- a/stratosphere-clients/src/test/java/eu/stratosphere/client/program/ClientTest.java
+++ b/stratosphere-clients/src/test/java/eu/stratosphere/client/program/ClientTest.java
@@ -112,7 +112,7 @@ public class ClientTest {
 		when(jobSubmissionResultMock.getReturnCode()).thenReturn(ReturnCode.SUCCESS);
 		
 		Client out = new Client(configMock);
-		out.run(program.getPlanWithJars(), false);
+		out.run(program.getPlanWithJars(), -1, false);
 		program.deleteExtractedLibraries();
 		
 		verify(this.compilerMock, times(1)).compile(planMock);
@@ -129,7 +129,7 @@ public class ClientTest {
 		when(jobSubmissionResultMock.getReturnCode()).thenReturn(ReturnCode.ERROR);
 		
 		Client out = new Client(configMock);
-		out.run(program.getPlanWithJars(), false);
+		out.run(program.getPlanWithJars(), -1, false);
 		program.deleteExtractedLibraries();
 		
 		verify(this.jobClientMock).submitJob();
diff --git a/stratosphere-dist/src/main/stratosphere-bin/bin/stratosphere b/stratosphere-dist/src/main/stratosphere-bin/bin/stratosphere
index 7c746e9..dc6ac20 100755
--- a/stratosphere-dist/src/main/stratosphere-bin/bin/stratosphere
+++ b/stratosphere-dist/src/main/stratosphere-bin/bin/stratosphere
@@ -28,7 +28,7 @@ STRATOSPHERE_LIB_CLIENTS_DIR=$STRATOSPHERE_ROOT_DIR/lib_clients
 
 JVM_ARGS="$JVM_ARGS -Xmx512m"
 
-# auxilliary function to construct a lightweight classpath for the
+# auxiliary function to construct a lightweight classpath for the
 # Stratosphere CLI client
 constructCLIClientClassPath() {
 
diff --git a/stratosphere-runtime/src/main/java/eu/stratosphere/pact/runtime/task/DataSinkTask.java b/stratosphere-runtime/src/main/java/eu/stratosphere/pact/runtime/task/DataSinkTask.java
index ba3c7c6..250efcc 100644
--- a/stratosphere-runtime/src/main/java/eu/stratosphere/pact/runtime/task/DataSinkTask.java
+++ b/stratosphere-runtime/src/main/java/eu/stratosphere/pact/runtime/task/DataSinkTask.java
@@ -47,7 +47,7 @@ import eu.stratosphere.util.MutableObjectIterator;
  * DataSinkTask which is executed by a Nephele task manager.
  * The task hands the data to an output format.
  * 
- * @see eu.eu.stratosphere.pact.common.generic.io.OutputFormat
+ * @see OutputFormat
  */
 public class DataSinkTask<IT> extends AbstractOutputTask {
 	
@@ -186,7 +186,7 @@ public class DataSinkTask<IT> extends AbstractOutputTask {
 			// drop, if the task was canceled
 			if (!this.taskCanceled) {
 				if (LOG.isErrorEnabled()) {
-					LOG.error(getLogString("Error in Pact user code: " + ex.getMessage()), ex);
+					LOG.error(getLogString("Error in user code: " + ex.getMessage()), ex);
 				}
 				throw ex;
 			}
@@ -327,7 +327,7 @@ public class DataSinkTask<IT> extends AbstractOutputTask {
 		this.inputTypeSerializerFactory = this.config.getInputSerializer(0, this.userCodeClassLoader);
 		
 		if (this.inputTypeSerializerFactory.getDataType() == Record.class) {
-			// pact record specific deserialization
+			// record specific deserialization
 			MutableReader<Record> reader = (MutableReader<Record>) inputReader;
 			this.reader = (MutableObjectIterator<IT>)new RecordReaderIterator(reader);
 		} else {

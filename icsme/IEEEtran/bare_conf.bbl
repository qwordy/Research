% Generated by IEEEtran.bst, version: 1.12 (2007/01/11)
\begin{thebibliography}{10}
\providecommand{\url}[1]{#1}
\csname url@samestyle\endcsname
\providecommand{\newblock}{\relax}
\providecommand{\bibinfo}[2]{#2}
\providecommand{\BIBentrySTDinterwordspacing}{\spaceskip=0pt\relax}
\providecommand{\BIBentryALTinterwordstretchfactor}{4}
\providecommand{\BIBentryALTinterwordspacing}{\spaceskip=\fontdimen2\font plus
\BIBentryALTinterwordstretchfactor\fontdimen3\font minus
  \fontdimen4\font\relax}
\providecommand{\BIBforeignlanguage}[2]{{%
\expandafter\ifx\csname l@#1\endcsname\relax
\typeout{** WARNING: IEEEtran.bst: No hyphenation pattern has been}%
\typeout{** loaded for the language `#1'. Using the pattern for}%
\typeout{** the default language instead.}%
\else
\language=\csname l@#1\endcsname
\fi
#2}}
\providecommand{\BIBdecl}{\relax}
\BIBdecl

\bibitem{journals/jss/PintoTFFB15}
G.~Pinto, W.~Torres, B.~Fernandes, F.~C. Filho, and R.~S.~M. de~Barros, ``A
  large-scale study on the usage of java's concurrent programming constructs,''
  \emph{Journal of Systems and Software}, vol. 106, pp. 59--81, 2015.

\bibitem{journals/corr/McKenney17}
P.~E. McKenney, ``Is parallel programming hard, and, if so, what can you do
  about it? (v2017.01.02a),'' \emph{CoRR}, vol. abs/1701.00854, 2017.

\bibitem{journals/queue/SutterL05}
H.~Sutter and J.~R. Larus, ``Software and the concurrency revolution,''
  \emph{{ACM} Queue}, vol.~3, no.~7, pp. 54--62, 2005.

\bibitem{conf/asplos/LuPSZ08}
S.~Lu, S.~Park, E.~Seo, and Y.~Zhou, ``Learning from mistakes: a comprehensive
  study on real world concurrency bug characteristics,'' in \emph{{ASPLOS}},
  2008.

\bibitem{conf/pldi/FlanaganF09}
C.~Flanagan and S.~N. Freund, ``Fasttrack: efficient and precise dynamic race
  detection,'' in \emph{{PLDI}}, 2009.

\bibitem{conf/kbse/KroeningPSW16}
D.~Kroening, D.~Poetzl, P.~Schrammel, and B.~Wachter, ``Sound static deadlock
  analysis for c/pthreads,'' in \emph{{ASE}}, 2016.

\bibitem{conf/pldi/FlanaganFY08}
C.~Flanagan, S.~N. Freund, and J.~Yi, ``Velodrome: a sound and complete dynamic
  atomicity checker for multithreaded programs,'' in \emph{{PLDI}}, 2008.

\bibitem{conf/java/Lea00}
D.~Lea, ``A java fork/join framework,'' in \emph{Java Grande}, 2000.

\bibitem{conf/oopsla/Bagherzadeh15}
M.~Bagherzadeh, ``Panini: a concurrent programming model with modular
  reasoning,'' in \emph{{SPLASH}}, 2015.

\bibitem{conf/sosp/DavidGT13}
T.~David, R.~Guerraoui, and V.~Trigonakis, ``Everything you always wanted to
  know about synchronization but were afraid to ask,'' in \emph{{SOSP}}, 2013.

\bibitem{conf/oopsla/PintoTC15}
G.~Pinto, W.~Torres, and F.~Castor, ``A study on the most popular questions
  about concurrent programming,'' in \emph{{PLATEAU@SPLASH}}, 2015.

\bibitem{conf/icsm/Borges16}
H.~Borges, ``On the popularity of github software,'' in \emph{{ICSME}}.

\bibitem{conf/icsm/BorgesHV16}
H.~Borges, A.~C. Hora, and M.~T. Valente, ``Understanding the factors that
  impact the popularity of github repositories,'' in \emph{{ICSME}}.

\bibitem{conf/icse/KimBDA16}
J.~Kim, D.~S. Batory, D.~Dig, and M.~Azanza, ``Improving refactoring speed by
  10x,'' in \emph{{ICSE}}, 2016.

\bibitem{conf/icsm/WahlerDS16}
M.~Wahler, U.~Drofenik, and W.~Snipes, ``Improving code maintainability: {A}
  case study on the impact of refactoring,'' in \emph{{ICSME}}, 2016.

\bibitem{conf/wcre/JiangPWXZ15}
Q.~Jiang, X.~Peng, H.~Wang, Z.~Xing, and W.~Zhao, ``Summarizing evolutionary
  trajectory by grouping and aggregating relevant code changes,'' in
  \emph{{SANER}}, 2015.

\bibitem{conf/icse/MengKM13}
N.~Meng, M.~Kim, and K.~S. McKinley, ``{LASE:} locating and applying systematic
  edits by learning from examples,'' in \emph{{ICSE}}.

\bibitem{conf/sigsoft/GuJSZL15}
R.~Gu, G.~Jin, L.~Song, L.~Zhu, and S.~Lu, ``What change history tells us about
  thread synchronization,'' in \emph{{ESEC/FSE}}, 2015.

\bibitem{conf/icsm/SantosAEDV15}
G.~Santos, N.~Anquetil, A.~Etien, S.~Ducasse, and M.~T. Valente, ``System
  specific, source code transformations,'' in \emph{{ICSME}}, 2015.

\bibitem{conf/pldi/MengKM11}
N.~Meng, M.~Kim, and K.~S. McKinley, ``Systematic editing: generating program
  transformations from an example,'' in \emph{{PLDI}}.

\bibitem{conf/ppopp/SamakR14}
M.~Samak and M.~K. Ramanathan, ``Trace driven dynamic deadlock detection and
  reproduction,'' in \emph{{PPoPP}}, 2014.

\bibitem{conf/sigsoft/EslamimehrP14}
M.~Eslamimehr and J.~Palsberg, ``Sherlock: scalable deadlock detection for
  concurrent programs,'' in \emph{{FSE}}, 2014.

\bibitem{conf/pldi/BiswasHSB14}
S.~Biswas, J.~Huang, A.~Sengupta, and M.~D. Bond, ``Doublechecker: efficient
  sound and precise atomicity checking,'' in \emph{{PLDI}}, 2014.

\bibitem{journals/sigops/LakshmanM10}
A.~Lakshman and P.~Malik, ``Cassandra: a decentralized structured storage
  system,'' \emph{Operating Systems Review}, vol.~44, no.~2, pp. 35--40, 2010.

\bibitem{conf/icse/KimN09}
M.~Kim and D.~Notkin, ``Discovering and representing systematic code changes,''
  in \emph{{ICSE}}, 2009.

\bibitem{conf/icsm/MartinezDM13}
M.~Martinez, L.~Duchien, and M.~Monperrus, ``Automatically extracting instances
  of code change patterns with {AST} analysis,'' in \emph{{ICSME}}, 2013.

\bibitem{journals/infsof/WuCZX16}
D.~Wu, L.~Chen, Y.~Zhou, and B.~Xu, ``An extensive empirical study on {C++}
  concurrency constructs,'' \emph{Information {\&} Software Technology},
  vol.~76, pp. 1--18, 2016.

\bibitem{conf/sigsoft/OkurD12}
S.~Okur and D.~Dig, ``How do developers use parallel libraries?'' in
  \emph{{FSE}}.

\bibitem{books/daglib/0022839}
J.~Loeliger, \emph{Version Control with Git - Powerful techniques for
  centralized and distributed project management}.\hskip 1em plus 0.5em minus
  0.4em\relax O'Reilly, 2009.

\bibitem{conf/icse/TianLL12}
Y.~Tian, J.~L. Lawall, and D.~Lo, ``Identifying linux bug fixing patches,'' in
  \emph{{ICSE}}, 2012.

\bibitem{journals/ml/CortesV95}
C.~Cortes and V.~Vapnik, ``Support-vector networks,'' \emph{Machine Learning},
  vol.~20, no.~3, pp. 273--297, 1995.

\bibitem{libsvm}
C.-C. Chang and C.-J. Lin, ``{LIBSVM}: A library for support vector machines,''
  \emph{ACM Transactions on Intelligent Systems and Technology}, vol.~2, pp.
  27:1--27:27, 2011, software available at
  \url{http://www.csie.ntu.edu.tw/~cjlin/libsvm}.

\bibitem{journals/jacm/KedemS83}
Z.~M. Kedem and A.~Silberschatz, ``Locking protocols: From exclusive to shared
  locks,'' \emph{J. {ACM}}, vol.~30, no.~4, pp. 787--804, 1983.

\bibitem{journals/cacm/CouroisHP71}
P.~Courtois, F.~Heymans, and D.~L. Parnas, ``Concurrent control with "readers"
  and "writers",'' \emph{Commun. {ACM}}, vol.~14, no.~10, pp. 667--668, 1971.

\bibitem{journals/cacm/EswarranGLT76}
K.~P. Eswaran, J.~Gray, R.~A. Lorie, and I.~L. Traiger, ``The notions of
  consistency and predicate locks in a database system,'' \emph{Commun. {ACM}},
  vol.~19, no.~11, pp. 624--633, 1976.

\bibitem{conf/ispass/IshizakiDN14}
K.~Ishizaki, S.~Daijavad, and T.~Nakatani, ``Transforming java programs for
  concurrency using double-checked locking pattern,'' in \emph{{ISPASS}}, 2014.

\bibitem{conf/oopsla/AyewahPMPZ07}
N.~Ayewah, W.~Pugh, J.~D. Morgenthaler, J.~Penix, and Y.~Zhou, ``Using findbugs
  on production software,'' in \emph{{OOPSLA} Companion}, 2007.

\bibitem{conf/msr/SadowskiYK12}
C.~Sadowski, J.~Yi, and S.~Kim, ``The evolution of data races,'' in
  \emph{{MSR}}, 2012.

\bibitem{conf/icsm/XinQHXZWG13}
R.~Xin, Z.~Qi, S.~Huang, C.~Xiang, Y.~Zheng, Y.~Wang, and H.~Guan, ``An
  automation-assisted empirical study on lock usage for concurrent programs,''
  in \emph{{ICSM}}, 2013.

\bibitem{journals/tse/ZhangWLQRZ16}
M.~Zhang, Y.~Wu, S.~Lu, S.~Qi, J.~Ren, and W.~Zheng, ``A lightweight system for
  detecting and tolerating concurrency bugs,'' \emph{{IEEE} Trans. Software
  Eng.}

\bibitem{conf/ecoop/OkurED14}
S.~Okur, C.~Erdogan, and D.~Dig, ``Converting parallel code from low-level
  abstractions to higher-level abstractions,'' in \emph{{ECOOP}}, 2014.

\bibitem{conf/sigsoft/LinRD14}
Y.~Lin, C.~Radoi, and D.~Dig, ``Retrofitting concurrency for android
  applications through refactoring,'' in \emph{{FSE}}.

\end{thebibliography}
